
UART2_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f20  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080020b8  080020b8  000120b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020dc  080020dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080020dc  080020dc  000120dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020e4  080020e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020e4  080020e4  000120e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020e8  080020e8  000120e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080020ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000010  080020fc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080020fc  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007cec  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015d5  00000000  00000000  00027d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000660  00000000  00000000  00029348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004e0  00000000  00000000  000299a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015236  00000000  00000000  00029e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008907  00000000  00000000  0003f0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084b30  00000000  00000000  000479c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001918  00000000  00000000  000cc4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000cde10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080020a0 	.word	0x080020a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080020a0 	.word	0x080020a0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <SysTick_Handler>:
 */
#include "main_app.h"

extern UART_HandleTypeDef Huart2;

void SysTick_Handler(void){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004e8:	f000 f9b6 	bl	8000858 <HAL_IncTick>

	HAL_SYSTICK_IRQHandler();
 80004ec:	f000 fae5 	bl	8000aba <HAL_SYSTICK_IRQHandler>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <USART2_IRQHandler>:


void USART2_IRQHandler(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&Huart2);
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <USART2_IRQHandler+0x10>)
 80004fa:	f000 fe45 	bl	8001188 <HAL_UART_IRQHandler>
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000002c 	.word	0x2000002c

08000508 <main>:
uint8_t data_buffer[100];
uint8_t rcvd;
uint32_t cnt = 0;
uint8_t rep_Complete = FALSE;

int main(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	HAL_Init();
 800050e:	f000 f951 	bl	80007b4 <HAL_Init>
	SystemClockConfig();
 8000512:	f000 f829 	bl	8000568 <SystemClockConfig>
	UART2_Init();
 8000516:	f000 f82f 	bl	8000578 <UART2_Init>

	uint16_t length_of_data = strlen(data_tx);
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <main+0x50>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff fe5a 	bl	80001d8 <strlen>
 8000524:	4603      	mov	r3, r0
 8000526:	80fb      	strh	r3, [r7, #6]
	if (HAL_UART_Transmit(&Huart2, (uint8_t *)data_tx, length_of_data, HAL_MAX_DELAY) != HAL_OK){
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <main+0x50>)
 800052a:	6819      	ldr	r1, [r3, #0]
 800052c:	88fa      	ldrh	r2, [r7, #6]
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	480a      	ldr	r0, [pc, #40]	; (800055c <main+0x54>)
 8000534:	f000 fd65 	bl	8001002 <HAL_UART_Transmit>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d007      	beq.n	800054e <main+0x46>
		Error_handler();
 800053e:	f000 f88f 	bl	8000660 <Error_handler>
	}

	while(rep_Complete != TRUE){
 8000542:	e004      	b.n	800054e <main+0x46>
		HAL_UART_Receive_IT(&Huart2, &rcvd, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	4906      	ldr	r1, [pc, #24]	; (8000560 <main+0x58>)
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <main+0x54>)
 800054a:	f000 fdec 	bl	8001126 <HAL_UART_Receive_IT>
	while(rep_Complete != TRUE){
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <main+0x5c>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d1f6      	bne.n	8000544 <main+0x3c>
	}


	while(1);
 8000556:	e7fe      	b.n	8000556 <main+0x4e>
 8000558:	20000000 	.word	0x20000000
 800055c:	2000002c 	.word	0x2000002c
 8000560:	200000d4 	.word	0x200000d4
 8000564:	200000dc 	.word	0x200000dc

08000568 <SystemClockConfig>:


	return 0;
}

void SystemClockConfig(void){
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <UART2_Init>:


void UART2_Init(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	// Linking
	Huart2.Instance = USART2;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <UART2_Init+0x44>)
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <UART2_Init+0x48>)
 8000580:	601a      	str	r2, [r3, #0]

	// Parameter Initialization
	Huart2.Init.BaudRate = 115200;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <UART2_Init+0x44>)
 8000584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000588:	605a      	str	r2, [r3, #4]
	Huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <UART2_Init+0x44>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
	Huart2.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <UART2_Init+0x44>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
	Huart2.Init.Parity = UART_PARITY_NONE;
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <UART2_Init+0x44>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
	Huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <UART2_Init+0x44>)
 800059e:	2200      	movs	r2, #0
 80005a0:	619a      	str	r2, [r3, #24]
	Huart2.Init.Mode = UART_MODE_TX_RX;
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <UART2_Init+0x44>)
 80005a4:	220c      	movs	r2, #12
 80005a6:	615a      	str	r2, [r3, #20]

	if (HAL_UART_Init(&Huart2) != HAL_OK){
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <UART2_Init+0x44>)
 80005aa:	f000 fcdd 	bl	8000f68 <HAL_UART_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <UART2_Init+0x40>
		Error_handler();
 80005b4:	f000 f854 	bl	8000660 <Error_handler>
	}
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000002c 	.word	0x2000002c
 80005c0:	40004400 	.word	0x40004400

080005c4 <convertToCaps>:

uint8_t convertToCaps(uint8_t data){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	if (data >= 'a' && data <= 'z'){
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b60      	cmp	r3, #96	; 0x60
 80005d2:	d905      	bls.n	80005e0 <convertToCaps+0x1c>
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b7a      	cmp	r3, #122	; 0x7a
 80005d8:	d802      	bhi.n	80005e0 <convertToCaps+0x1c>
		data = data - ('a' - 'A');
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	3b20      	subs	r3, #32
 80005de:	71fb      	strb	r3, [r7, #7]
	}

	return data;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	if (rcvd == '\r'){
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <HAL_UART_RxCpltCallback+0x60>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b0d      	cmp	r3, #13
 80005fe:	d114      	bne.n	800062a <HAL_UART_RxCpltCallback+0x3a>
		rep_Complete = TRUE;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <HAL_UART_RxCpltCallback+0x64>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
		data_buffer[cnt++] = '\r';
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <HAL_UART_RxCpltCallback+0x68>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	4912      	ldr	r1, [pc, #72]	; (8000658 <HAL_UART_RxCpltCallback+0x68>)
 800060e:	600a      	str	r2, [r1, #0]
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <HAL_UART_RxCpltCallback+0x6c>)
 8000612:	210d      	movs	r1, #13
 8000614:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(huart, data_buffer, cnt, HAL_MAX_DELAY);
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <HAL_UART_RxCpltCallback+0x68>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	b29a      	uxth	r2, r3
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	490e      	ldr	r1, [pc, #56]	; (800065c <HAL_UART_RxCpltCallback+0x6c>)
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 fced 	bl	8001002 <HAL_UART_Transmit>
	}
	else{
		data_buffer[cnt++] = convertToCaps(rcvd);
	}

}
 8000628:	e00d      	b.n	8000646 <HAL_UART_RxCpltCallback+0x56>
		data_buffer[cnt++] = convertToCaps(rcvd);
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_UART_RxCpltCallback+0x60>)
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_UART_RxCpltCallback+0x68>)
 8000630:	681c      	ldr	r4, [r3, #0]
 8000632:	1c63      	adds	r3, r4, #1
 8000634:	4908      	ldr	r1, [pc, #32]	; (8000658 <HAL_UART_RxCpltCallback+0x68>)
 8000636:	600b      	str	r3, [r1, #0]
 8000638:	4610      	mov	r0, r2
 800063a:	f7ff ffc3 	bl	80005c4 <convertToCaps>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_UART_RxCpltCallback+0x6c>)
 8000644:	551a      	strb	r2, [r3, r4]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bd90      	pop	{r4, r7, pc}
 800064e:	bf00      	nop
 8000650:	200000d4 	.word	0x200000d4
 8000654:	200000dc 	.word	0x200000dc
 8000658:	200000d8 	.word	0x200000d8
 800065c:	20000070 	.word	0x20000070

08000660 <Error_handler>:

void Error_handler(void){
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
	while(1);
 8000664:	e7fe      	b.n	8000664 <Error_handler+0x4>
	...

08000668 <HAL_MspInit>:
 *  Created on: Nov 7, 2023
 *      Author: user
 */
#include "stm32f4xx_hal.h"

void HAL_MspInit(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	/********	Low Level Processor Specific Intits **********/
	//1. Configure the priority grouping of ARM CORTEX Mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f9e3 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable required processor system exceptions
	SCB->SHCSR |=  0x7 << 16; // enabled: usgfaultene, busfaultena, and memfaulten system exception
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_MspInit+0x40>)
 8000674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000676:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <HAL_MspInit+0x40>)
 8000678:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800067c:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority of the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	f06f 000b 	mvn.w	r0, #11
 8000686:	f000 f9e2 	bl	8000a4e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	f06f 000a 	mvn.w	r0, #10
 8000692:	f000 f9dc 	bl	8000a4e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	f06f 0009 	mvn.w	r0, #9
 800069e:	f000 f9d6 	bl	8000a4e <HAL_NVIC_SetPriority>

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	/********	Low Level USART2 Peripheral Intits **********/
	GPIO_InitTypeDef GPIO_UART;

	//1. Enable the clock for usart peripheral and GPIOA
	__HAL_RCC_USART2_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <HAL_UART_MspInit+0x88>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <HAL_UART_MspInit+0x88>)
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <HAL_UART_MspInit+0x88>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <HAL_UART_MspInit+0x88>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a16      	ldr	r2, [pc, #88]	; (8000734 <HAL_UART_MspInit+0x88>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <HAL_UART_MspInit+0x88>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]

	//2. Do pin muxing configuration
	GPIO_UART.Pin = GPIO_PIN_2;
 80006ec:	2304      	movs	r3, #4
 80006ee:	617b      	str	r3, [r7, #20]
	GPIO_UART.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61bb      	str	r3, [r7, #24]
	GPIO_UART.Pull = GPIO_PULLUP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61fb      	str	r3, [r7, #28]
	GPIO_UART.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
	GPIO_UART.Alternate = GPIO_AF7_USART2;
 80006fc:	2307      	movs	r3, #7
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_UART);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	480c      	ldr	r0, [pc, #48]	; (8000738 <HAL_UART_MspInit+0x8c>)
 8000708:	f000 fa76 	bl	8000bf8 <HAL_GPIO_Init>

	GPIO_UART.Pin = GPIO_PIN_3;
 800070c:	2308      	movs	r3, #8
 800070e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_UART);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	4808      	ldr	r0, [pc, #32]	; (8000738 <HAL_UART_MspInit+0x8c>)
 8000718:	f000 fa6e 	bl	8000bf8 <HAL_GPIO_Init>

	//3. Enable IRQ and set up priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800071c:	2026      	movs	r0, #38	; 0x26
 800071e:	f000 f9b2 	bl	8000a86 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2026      	movs	r0, #38	; 0x26
 8000728:	f000 f991 	bl	8000a4e <HAL_NVIC_SetPriority>

}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40020000 	.word	0x40020000

0800073c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <SystemInit+0x20>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000746:	4a05      	ldr	r2, [pc, #20]	; (800075c <SystemInit+0x20>)
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000798 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000766:	490e      	ldr	r1, [pc, #56]	; (80007a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800077c:	4c0b      	ldr	r4, [pc, #44]	; (80007ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800078a:	f7ff ffd7 	bl	800073c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078e:	f001 fc63 	bl	8002058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000792:	f7ff feb9 	bl	8000508 <main>
  bx  lr    
 8000796:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007a4:	080020ec 	.word	0x080020ec
  ldr r2, =_sbss
 80007a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007ac:	200000e4 	.word	0x200000e4

080007b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_Init+0x40>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <HAL_Init+0x40>)
 80007be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_Init+0x40>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <HAL_Init+0x40>)
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <HAL_Init+0x40>)
 80007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f92b 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 f808 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f7ff ff3e 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023c00 	.word	0x40023c00

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f943 	bl	8000aa2 <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f90b 	bl	8000a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000004 	.word	0x20000004
 8000850:	2000000c 	.word	0x2000000c
 8000854:	20000008 	.word	0x20000008

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	2000000c 	.word	0x2000000c
 800087c:	200000e0 	.word	0x200000e0

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200000e0 	.word	0x200000e0

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4907      	ldr	r1, [pc, #28]	; (8000934 <__NVIC_EnableIRQ+0x38>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000e100 	.word	0xe000e100

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43d9      	mvns	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	4313      	orrs	r3, r2
         );
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3724      	adds	r7, #36	; 0x24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a04:	d301      	bcc.n	8000a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00f      	b.n	8000a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <SysTick_Config+0x40>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a12:	210f      	movs	r1, #15
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f7ff ff8e 	bl	8000938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SysTick_Config+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SysTick_Config+0x40>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	e000e010 	.word	0xe000e010

08000a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff29 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a60:	f7ff ff3e 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff ff8e 	bl	800098c <NVIC_EncodePriority>
 8000a70:	4602      	mov	r2, r0
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff5d 	bl	8000938 <__NVIC_SetPriority>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff31 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffa2 	bl	80009f4 <SysTick_Config>
 8000ab0:	4603      	mov	r3, r0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000abe:	f000 f802 	bl	8000ac6 <HAL_SYSTICK_Callback>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ae2:	f7ff fecd 	bl	8000880 <HAL_GetTick>
 8000ae6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d008      	beq.n	8000b06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e052      	b.n	8000bac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f022 0216 	bic.w	r2, r2, #22
 8000b14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	695a      	ldr	r2, [r3, #20]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d103      	bne.n	8000b36 <HAL_DMA_Abort+0x62>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d007      	beq.n	8000b46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0208 	bic.w	r2, r2, #8
 8000b44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 0201 	bic.w	r2, r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b56:	e013      	b.n	8000b80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b58:	f7ff fe92 	bl	8000880 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	2b05      	cmp	r3, #5
 8000b64:	d90c      	bls.n	8000b80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2220      	movs	r2, #32
 8000b6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2203      	movs	r2, #3
 8000b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e015      	b.n	8000bac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1e4      	bne.n	8000b58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b92:	223f      	movs	r2, #63	; 0x3f
 8000b94:	409a      	lsls	r2, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d004      	beq.n	8000bd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00c      	b.n	8000bec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2205      	movs	r2, #5
 8000bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0201 	bic.w	r2, r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	e159      	b.n	8000ec8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c14:	2201      	movs	r2, #1
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	f040 8148 	bne.w	8000ec2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0303 	and.w	r3, r3, #3
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d005      	beq.n	8000c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d130      	bne.n	8000cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2203      	movs	r2, #3
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	68da      	ldr	r2, [r3, #12]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c80:	2201      	movs	r2, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	091b      	lsrs	r3, r3, #4
 8000c96:	f003 0201 	and.w	r2, r3, #1
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d017      	beq.n	8000ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d123      	bne.n	8000d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	08da      	lsrs	r2, r3, #3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3208      	adds	r2, #8
 8000cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	220f      	movs	r2, #15
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	691a      	ldr	r2, [r3, #16]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	08da      	lsrs	r2, r3, #3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3208      	adds	r2, #8
 8000d36:	69b9      	ldr	r1, [r7, #24]
 8000d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0203 	and.w	r2, r3, #3
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 80a2 	beq.w	8000ec2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b57      	ldr	r3, [pc, #348]	; (8000ee0 <HAL_GPIO_Init+0x2e8>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a56      	ldr	r2, [pc, #344]	; (8000ee0 <HAL_GPIO_Init+0x2e8>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b54      	ldr	r3, [pc, #336]	; (8000ee0 <HAL_GPIO_Init+0x2e8>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d9a:	4a52      	ldr	r2, [pc, #328]	; (8000ee4 <HAL_GPIO_Init+0x2ec>)
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3302      	adds	r3, #2
 8000da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	220f      	movs	r2, #15
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a49      	ldr	r2, [pc, #292]	; (8000ee8 <HAL_GPIO_Init+0x2f0>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d019      	beq.n	8000dfa <HAL_GPIO_Init+0x202>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a48      	ldr	r2, [pc, #288]	; (8000eec <HAL_GPIO_Init+0x2f4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d013      	beq.n	8000df6 <HAL_GPIO_Init+0x1fe>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a47      	ldr	r2, [pc, #284]	; (8000ef0 <HAL_GPIO_Init+0x2f8>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d00d      	beq.n	8000df2 <HAL_GPIO_Init+0x1fa>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a46      	ldr	r2, [pc, #280]	; (8000ef4 <HAL_GPIO_Init+0x2fc>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d007      	beq.n	8000dee <HAL_GPIO_Init+0x1f6>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a45      	ldr	r2, [pc, #276]	; (8000ef8 <HAL_GPIO_Init+0x300>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d101      	bne.n	8000dea <HAL_GPIO_Init+0x1f2>
 8000de6:	2304      	movs	r3, #4
 8000de8:	e008      	b.n	8000dfc <HAL_GPIO_Init+0x204>
 8000dea:	2307      	movs	r3, #7
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x204>
 8000dee:	2303      	movs	r3, #3
 8000df0:	e004      	b.n	8000dfc <HAL_GPIO_Init+0x204>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e002      	b.n	8000dfc <HAL_GPIO_Init+0x204>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <HAL_GPIO_Init+0x204>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	f002 0203 	and.w	r2, r2, #3
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	4093      	lsls	r3, r2
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e0c:	4935      	ldr	r1, [pc, #212]	; (8000ee4 <HAL_GPIO_Init+0x2ec>)
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3e:	4a2f      	ldr	r2, [pc, #188]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e68:	4a24      	ldr	r2, [pc, #144]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e92:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ebc:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	f67f aea2 	bls.w	8000c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40013c00 	.word	0x40013c00

08000f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f1c:	f7ff fff0 	bl	8000f00 <HAL_RCC_GetHCLKFreq>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	0a9b      	lsrs	r3, r3, #10
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	4903      	ldr	r1, [pc, #12]	; (8000f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f2e:	5ccb      	ldrb	r3, [r1, r3]
 8000f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	080020d4 	.word	0x080020d4

08000f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f44:	f7ff ffdc 	bl	8000f00 <HAL_RCC_GetHCLKFreq>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	0b5b      	lsrs	r3, r3, #13
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	4903      	ldr	r1, [pc, #12]	; (8000f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f56:	5ccb      	ldrb	r3, [r1, r3]
 8000f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	080020d4 	.word	0x080020d4

08000f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e03f      	b.n	8000ffa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d106      	bne.n	8000f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fb8c 	bl	80006ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2224      	movs	r2, #36	; 0x24
 8000f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 fddf 	bl	8001b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	695a      	ldr	r2, [r3, #20]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2220      	movs	r2, #32
 8000fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b08a      	sub	sp, #40	; 0x28
 8001006:	af02      	add	r7, sp, #8
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4613      	mov	r3, r2
 8001010:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b20      	cmp	r3, #32
 8001020:	d17c      	bne.n	800111c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <HAL_UART_Transmit+0x2c>
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e075      	b.n	800111e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <HAL_UART_Transmit+0x3e>
 800103c:	2302      	movs	r3, #2
 800103e:	e06e      	b.n	800111e <HAL_UART_Transmit+0x11c>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2221      	movs	r2, #33	; 0x21
 8001052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001056:	f7ff fc13 	bl	8000880 <HAL_GetTick>
 800105a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	88fa      	ldrh	r2, [r7, #6]
 8001060:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	88fa      	ldrh	r2, [r7, #6]
 8001066:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001070:	d108      	bne.n	8001084 <HAL_UART_Transmit+0x82>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d104      	bne.n	8001084 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	e003      	b.n	800108c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001094:	e02a      	b.n	80010ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2200      	movs	r2, #0
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f000 fb1f 	bl	80016e4 <UART_WaitOnFlagUntilTimeout>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e036      	b.n	800111e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10b      	bne.n	80010ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	3302      	adds	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	e007      	b.n	80010de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	3301      	adds	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	3b01      	subs	r3, #1
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1cf      	bne.n	8001096 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2200      	movs	r2, #0
 80010fe:	2140      	movs	r1, #64	; 0x40
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 faef 	bl	80016e4 <UART_WaitOnFlagUntilTimeout>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e006      	b.n	800111e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2220      	movs	r2, #32
 8001114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	e000      	b.n	800111e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800111c:	2302      	movs	r3, #2
  }
}
 800111e:	4618      	mov	r0, r3
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	4613      	mov	r3, r2
 8001132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b20      	cmp	r3, #32
 800113e:	d11d      	bne.n	800117c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <HAL_UART_Receive_IT+0x26>
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e016      	b.n	800117e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001156:	2b01      	cmp	r3, #1
 8001158:	d101      	bne.n	800115e <HAL_UART_Receive_IT+0x38>
 800115a:	2302      	movs	r3, #2
 800115c:	e00f      	b.n	800117e <HAL_UART_Receive_IT+0x58>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2200      	movs	r2, #0
 800116a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	461a      	mov	r2, r3
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f000 fb24 	bl	80017c0 <UART_Start_Receive_IT>
 8001178:	4603      	mov	r3, r0
 800117a:	e000      	b.n	800117e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800117c:	2302      	movs	r3, #2
  }
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0ba      	sub	sp, #232	; 0xe8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80011ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80011c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10f      	bne.n	80011ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <HAL_UART_IRQHandler+0x66>
 80011da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011de:	f003 0320 	and.w	r3, r3, #32
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 fc07 	bl	80019fa <UART_Receive_IT>
      return;
 80011ec:	e256      	b.n	800169c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80011ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80de 	beq.w	80013b4 <HAL_UART_IRQHandler+0x22c>
 80011f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d106      	bne.n	8001212 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001208:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80d1 	beq.w	80013b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_UART_IRQHandler+0xae>
 800121e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f043 0201 	orr.w	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <HAL_UART_IRQHandler+0xd2>
 8001242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f043 0202 	orr.w	r2, r3, #2
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800125a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00b      	beq.n	800127e <HAL_UART_IRQHandler+0xf6>
 8001266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f043 0204 	orr.w	r2, r3, #4
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800127e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d011      	beq.n	80012ae <HAL_UART_IRQHandler+0x126>
 800128a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	2b00      	cmp	r3, #0
 8001294:	d105      	bne.n	80012a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f043 0208 	orr.w	r2, r3, #8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 81ed 	beq.w	8001692 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <HAL_UART_IRQHandler+0x14e>
 80012c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fb92 	bl	80019fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e0:	2b40      	cmp	r3, #64	; 0x40
 80012e2:	bf0c      	ite	eq
 80012e4:	2301      	moveq	r3, #1
 80012e6:	2300      	movne	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d103      	bne.n	8001302 <HAL_UART_IRQHandler+0x17a>
 80012fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d04f      	beq.n	80013a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 fa9a 	bl	800183c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001312:	2b40      	cmp	r3, #64	; 0x40
 8001314:	d141      	bne.n	800139a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3314      	adds	r3, #20
 800131c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001324:	e853 3f00 	ldrex	r3, [r3]
 8001328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800132c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3314      	adds	r3, #20
 800133e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001342:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800134a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800134e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001352:	e841 2300 	strex	r3, r2, [r1]
 8001356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800135a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1d9      	bne.n	8001316 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001366:	2b00      	cmp	r3, #0
 8001368:	d013      	beq.n	8001392 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136e:	4a7d      	ldr	r2, [pc, #500]	; (8001564 <HAL_UART_IRQHandler+0x3dc>)
 8001370:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fc1c 	bl	8000bb4 <HAL_DMA_Abort_IT>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d016      	beq.n	80013b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800138c:	4610      	mov	r0, r2
 800138e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001390:	e00e      	b.n	80013b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f990 	bl	80016b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001398:	e00a      	b.n	80013b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f98c 	bl	80016b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013a0:	e006      	b.n	80013b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f988 	bl	80016b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80013ae:	e170      	b.n	8001692 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013b0:	bf00      	nop
    return;
 80013b2:	e16e      	b.n	8001692 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	f040 814a 	bne.w	8001652 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80013be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8143 	beq.w	8001652 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80013cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 813c 	beq.w	8001652 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fa:	2b40      	cmp	r3, #64	; 0x40
 80013fc:	f040 80b4 	bne.w	8001568 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800140c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 8140 	beq.w	8001696 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800141a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800141e:	429a      	cmp	r2, r3
 8001420:	f080 8139 	bcs.w	8001696 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800142a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001436:	f000 8088 	beq.w	800154a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	330c      	adds	r3, #12
 8001440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001448:	e853 3f00 	ldrex	r3, [r3]
 800144c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	330c      	adds	r3, #12
 8001462:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001466:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800146a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800146e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001472:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001476:	e841 2300 	strex	r3, r2, [r1]
 800147a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800147e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1d9      	bne.n	800143a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3314      	adds	r3, #20
 800148c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800148e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001490:	e853 3f00 	ldrex	r3, [r3]
 8001494:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3314      	adds	r3, #20
 80014a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80014aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80014ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80014b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80014b6:	e841 2300 	strex	r3, r2, [r1]
 80014ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80014bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1e1      	bne.n	8001486 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3314      	adds	r3, #20
 80014c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014cc:	e853 3f00 	ldrex	r3, [r3]
 80014d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80014d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3314      	adds	r3, #20
 80014e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80014e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80014e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80014ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014ee:	e841 2300 	strex	r3, r2, [r1]
 80014f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80014f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1e3      	bne.n	80014c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2220      	movs	r2, #32
 80014fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	330c      	adds	r3, #12
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001512:	e853 3f00 	ldrex	r3, [r3]
 8001516:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800151a:	f023 0310 	bic.w	r3, r3, #16
 800151e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	330c      	adds	r3, #12
 8001528:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800152c:	65ba      	str	r2, [r7, #88]	; 0x58
 800152e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001530:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001534:	e841 2300 	strex	r3, r2, [r1]
 8001538:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800153a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e3      	bne.n	8001508 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fac5 	bl	8000ad4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001552:	b29b      	uxth	r3, r3
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f8b6 	bl	80016cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001560:	e099      	b.n	8001696 <HAL_UART_IRQHandler+0x50e>
 8001562:	bf00      	nop
 8001564:	08001903 	.word	0x08001903
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001570:	b29b      	uxth	r3, r3
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800157c:	b29b      	uxth	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 808b 	beq.w	800169a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8086 	beq.w	800169a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	330c      	adds	r3, #12
 8001594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001598:	e853 3f00 	ldrex	r3, [r3]
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800159e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80015a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	330c      	adds	r3, #12
 80015ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80015b2:	647a      	str	r2, [r7, #68]	; 0x44
 80015b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80015b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015ba:	e841 2300 	strex	r3, r2, [r1]
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80015c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1e3      	bne.n	800158e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3314      	adds	r3, #20
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	e853 3f00 	ldrex	r3, [r3]
 80015d4:	623b      	str	r3, [r7, #32]
   return(result);
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3314      	adds	r3, #20
 80015e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015ea:	633a      	str	r2, [r7, #48]	; 0x30
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015f2:	e841 2300 	strex	r3, r2, [r1]
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1e3      	bne.n	80015c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	330c      	adds	r3, #12
 8001612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	e853 3f00 	ldrex	r3, [r3]
 800161a:	60fb      	str	r3, [r7, #12]
   return(result);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f023 0310 	bic.w	r3, r3, #16
 8001622:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	330c      	adds	r3, #12
 800162c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001630:	61fa      	str	r2, [r7, #28]
 8001632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001634:	69b9      	ldr	r1, [r7, #24]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	e841 2300 	strex	r3, r2, [r1]
 800163c:	617b      	str	r3, [r7, #20]
   return(result);
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e3      	bne.n	800160c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001648:	4619      	mov	r1, r3
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f83e 	bl	80016cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001650:	e023      	b.n	800169a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <HAL_UART_IRQHandler+0x4ea>
 800165e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f95d 	bl	800192a <UART_Transmit_IT>
    return;
 8001670:	e014      	b.n	800169c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00e      	beq.n	800169c <HAL_UART_IRQHandler+0x514>
 800167e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f99d 	bl	80019ca <UART_EndTransmit_IT>
    return;
 8001690:	e004      	b.n	800169c <HAL_UART_IRQHandler+0x514>
    return;
 8001692:	bf00      	nop
 8001694:	e002      	b.n	800169c <HAL_UART_IRQHandler+0x514>
      return;
 8001696:	bf00      	nop
 8001698:	e000      	b.n	800169c <HAL_UART_IRQHandler+0x514>
      return;
 800169a:	bf00      	nop
  }
}
 800169c:	37e8      	adds	r7, #232	; 0xe8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop

080016a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b090      	sub	sp, #64	; 0x40
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016f4:	e050      	b.n	8001798 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d04c      	beq.n	8001798 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001700:	2b00      	cmp	r3, #0
 8001702:	d007      	beq.n	8001714 <UART_WaitOnFlagUntilTimeout+0x30>
 8001704:	f7ff f8bc 	bl	8000880 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001710:	429a      	cmp	r2, r3
 8001712:	d241      	bcs.n	8001798 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	330c      	adds	r3, #12
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171e:	e853 3f00 	ldrex	r3, [r3]
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	330c      	adds	r3, #12
 8001732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001734:	637a      	str	r2, [r7, #52]	; 0x34
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001738:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800173a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800173c:	e841 2300 	strex	r3, r2, [r1]
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1e5      	bne.n	8001714 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3314      	adds	r3, #20
 800174e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	e853 3f00 	ldrex	r3, [r3]
 8001756:	613b      	str	r3, [r7, #16]
   return(result);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3314      	adds	r3, #20
 8001766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001768:	623a      	str	r2, [r7, #32]
 800176a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800176c:	69f9      	ldr	r1, [r7, #28]
 800176e:	6a3a      	ldr	r2, [r7, #32]
 8001770:	e841 2300 	strex	r3, r2, [r1]
 8001774:	61bb      	str	r3, [r7, #24]
   return(result);
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1e5      	bne.n	8001748 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2220      	movs	r2, #32
 8001780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2220      	movs	r2, #32
 8001788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e00f      	b.n	80017b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	4013      	ands	r3, r2
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d09f      	beq.n	80016f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3740      	adds	r7, #64	; 0x40
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	4613      	mov	r3, r2
 80017cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	88fa      	ldrh	r2, [r7, #6]
 80017d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	88fa      	ldrh	r2, [r7, #6]
 80017de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2222      	movs	r2, #34	; 0x22
 80017ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68da      	ldr	r2, [r3, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800180c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0201 	orr.w	r2, r2, #1
 800181c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800183c:	b480      	push	{r7}
 800183e:	b095      	sub	sp, #84	; 0x54
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	330c      	adds	r3, #12
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800184c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184e:	e853 3f00 	ldrex	r3, [r3]
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800185a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	330c      	adds	r3, #12
 8001862:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001864:	643a      	str	r2, [r7, #64]	; 0x40
 8001866:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800186a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800186c:	e841 2300 	strex	r3, r2, [r1]
 8001870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1e5      	bne.n	8001844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3314      	adds	r3, #20
 800187e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	e853 3f00 	ldrex	r3, [r3]
 8001886:	61fb      	str	r3, [r7, #28]
   return(result);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3314      	adds	r3, #20
 8001896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001898:	62fa      	str	r2, [r7, #44]	; 0x2c
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800189c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800189e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a0:	e841 2300 	strex	r3, r2, [r1]
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e5      	bne.n	8001878 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d119      	bne.n	80018e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	330c      	adds	r3, #12
 80018ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	e853 3f00 	ldrex	r3, [r3]
 80018c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f023 0310 	bic.w	r3, r3, #16
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	330c      	adds	r3, #12
 80018d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018d4:	61ba      	str	r2, [r7, #24]
 80018d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018d8:	6979      	ldr	r1, [r7, #20]
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	e841 2300 	strex	r3, r2, [r1]
 80018e0:	613b      	str	r3, [r7, #16]
   return(result);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1e5      	bne.n	80018b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80018f6:	bf00      	nop
 80018f8:	3754      	adds	r7, #84	; 0x54
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fecb 	bl	80016b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800192a:	b480      	push	{r7}
 800192c:	b085      	sub	sp, #20
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b21      	cmp	r3, #33	; 0x21
 800193c:	d13e      	bne.n	80019bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001946:	d114      	bne.n	8001972 <UART_Transmit_IT+0x48>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d110      	bne.n	8001972 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001964:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	1c9a      	adds	r2, r3, #2
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	621a      	str	r2, [r3, #32]
 8001970:	e008      	b.n	8001984 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6211      	str	r1, [r2, #32]
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001988:	b29b      	uxth	r3, r3
 800198a:	3b01      	subs	r3, #1
 800198c:	b29b      	uxth	r3, r3
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4619      	mov	r1, r3
 8001992:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10f      	bne.n	80019b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e000      	b.n	80019be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80019bc:	2302      	movs	r3, #2
  }
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fe5a 	bl	80016a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b08c      	sub	sp, #48	; 0x30
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b22      	cmp	r3, #34	; 0x22
 8001a0c:	f040 80ab 	bne.w	8001b66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a18:	d117      	bne.n	8001a4a <UART_Receive_IT+0x50>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d113      	bne.n	8001a4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	1c9a      	adds	r2, r3, #2
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
 8001a48:	e026      	b.n	8001a98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a5c:	d007      	beq.n	8001a6e <UART_Receive_IT+0x74>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10a      	bne.n	8001a7c <UART_Receive_IT+0x82>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	e008      	b.n	8001a8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d15a      	bne.n	8001b62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0220 	bic.w	r2, r2, #32
 8001aba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d135      	bne.n	8001b58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	330c      	adds	r3, #12
 8001af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	e853 3f00 	ldrex	r3, [r3]
 8001b00:	613b      	str	r3, [r7, #16]
   return(result);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f023 0310 	bic.w	r3, r3, #16
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	330c      	adds	r3, #12
 8001b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b12:	623a      	str	r2, [r7, #32]
 8001b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b16:	69f9      	ldr	r1, [r7, #28]
 8001b18:	6a3a      	ldr	r2, [r7, #32]
 8001b1a:	e841 2300 	strex	r3, r2, [r1]
 8001b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1e5      	bne.n	8001af2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d10a      	bne.n	8001b4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fdbb 	bl	80016cc <HAL_UARTEx_RxEventCallback>
 8001b56:	e002      	b.n	8001b5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7fe fd49 	bl	80005f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e002      	b.n	8001b68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8001b66:	2302      	movs	r3, #2
  }
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3730      	adds	r7, #48	; 0x30
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b74:	b0c0      	sub	sp, #256	; 0x100
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b8c:	68d9      	ldr	r1, [r3, #12]
 8001b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	ea40 0301 	orr.w	r3, r0, r1
 8001b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001bc8:	f021 010c 	bic.w	r1, r1, #12
 8001bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bea:	6999      	ldr	r1, [r3, #24]
 8001bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	ea40 0301 	orr.w	r3, r0, r1
 8001bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b8f      	ldr	r3, [pc, #572]	; (8001e3c <UART_SetConfig+0x2cc>)
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d005      	beq.n	8001c10 <UART_SetConfig+0xa0>
 8001c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b8d      	ldr	r3, [pc, #564]	; (8001e40 <UART_SetConfig+0x2d0>)
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d104      	bne.n	8001c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c10:	f7ff f996 	bl	8000f40 <HAL_RCC_GetPCLK2Freq>
 8001c14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001c18:	e003      	b.n	8001c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c1a:	f7ff f97d 	bl	8000f18 <HAL_RCC_GetPCLK1Freq>
 8001c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c2c:	f040 810c 	bne.w	8001e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c34:	2200      	movs	r2, #0
 8001c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c42:	4622      	mov	r2, r4
 8001c44:	462b      	mov	r3, r5
 8001c46:	1891      	adds	r1, r2, r2
 8001c48:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c4a:	415b      	adcs	r3, r3
 8001c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c52:	4621      	mov	r1, r4
 8001c54:	eb12 0801 	adds.w	r8, r2, r1
 8001c58:	4629      	mov	r1, r5
 8001c5a:	eb43 0901 	adc.w	r9, r3, r1
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c72:	4690      	mov	r8, r2
 8001c74:	4699      	mov	r9, r3
 8001c76:	4623      	mov	r3, r4
 8001c78:	eb18 0303 	adds.w	r3, r8, r3
 8001c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c80:	462b      	mov	r3, r5
 8001c82:	eb49 0303 	adc.w	r3, r9, r3
 8001c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	18db      	adds	r3, r3, r3
 8001ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	eb42 0303 	adc.w	r3, r2, r3
 8001caa:	657b      	str	r3, [r7, #84]	; 0x54
 8001cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001cb4:	f7fe fa98 	bl	80001e8 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <UART_SetConfig+0x2d4>)
 8001cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	011c      	lsls	r4, r3, #4
 8001cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001cd8:	4642      	mov	r2, r8
 8001cda:	464b      	mov	r3, r9
 8001cdc:	1891      	adds	r1, r2, r2
 8001cde:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ce0:	415b      	adcs	r3, r3
 8001ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ce8:	4641      	mov	r1, r8
 8001cea:	eb12 0a01 	adds.w	sl, r2, r1
 8001cee:	4649      	mov	r1, r9
 8001cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d08:	4692      	mov	sl, r2
 8001d0a:	469b      	mov	fp, r3
 8001d0c:	4643      	mov	r3, r8
 8001d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8001d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d16:	464b      	mov	r3, r9
 8001d18:	eb4b 0303 	adc.w	r3, fp, r3
 8001d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d34:	460b      	mov	r3, r1
 8001d36:	18db      	adds	r3, r3, r3
 8001d38:	643b      	str	r3, [r7, #64]	; 0x40
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	eb42 0303 	adc.w	r3, r2, r3
 8001d40:	647b      	str	r3, [r7, #68]	; 0x44
 8001d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d4a:	f7fe fa4d 	bl	80001e8 <__aeabi_uldivmod>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4611      	mov	r1, r2
 8001d54:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <UART_SetConfig+0x2d4>)
 8001d56:	fba3 2301 	umull	r2, r3, r3, r1
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2264      	movs	r2, #100	; 0x64
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	1acb      	subs	r3, r1, r3
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d6a:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <UART_SetConfig+0x2d4>)
 8001d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d78:	441c      	add	r4, r3
 8001d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d8c:	4642      	mov	r2, r8
 8001d8e:	464b      	mov	r3, r9
 8001d90:	1891      	adds	r1, r2, r2
 8001d92:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d94:	415b      	adcs	r3, r3
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d9c:	4641      	mov	r1, r8
 8001d9e:	1851      	adds	r1, r2, r1
 8001da0:	6339      	str	r1, [r7, #48]	; 0x30
 8001da2:	4649      	mov	r1, r9
 8001da4:	414b      	adcs	r3, r1
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001db4:	4659      	mov	r1, fp
 8001db6:	00cb      	lsls	r3, r1, #3
 8001db8:	4651      	mov	r1, sl
 8001dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dbe:	4651      	mov	r1, sl
 8001dc0:	00ca      	lsls	r2, r1, #3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4642      	mov	r2, r8
 8001dca:	189b      	adds	r3, r3, r2
 8001dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001dd0:	464b      	mov	r3, r9
 8001dd2:	460a      	mov	r2, r1
 8001dd4:	eb42 0303 	adc.w	r3, r2, r3
 8001dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001de8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001df0:	460b      	mov	r3, r1
 8001df2:	18db      	adds	r3, r3, r3
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df6:	4613      	mov	r3, r2
 8001df8:	eb42 0303 	adc.w	r3, r2, r3
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e06:	f7fe f9ef 	bl	80001e8 <__aeabi_uldivmod>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <UART_SetConfig+0x2d4>)
 8001e10:	fba3 1302 	umull	r1, r3, r3, r2
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	2164      	movs	r1, #100	; 0x64
 8001e18:	fb01 f303 	mul.w	r3, r1, r3
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	3332      	adds	r3, #50	; 0x32
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <UART_SetConfig+0x2d4>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	f003 0207 	and.w	r2, r3, #7
 8001e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4422      	add	r2, r4
 8001e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e38:	e106      	b.n	8002048 <UART_SetConfig+0x4d8>
 8001e3a:	bf00      	nop
 8001e3c:	40011000 	.word	0x40011000
 8001e40:	40011400 	.word	0x40011400
 8001e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e5a:	4642      	mov	r2, r8
 8001e5c:	464b      	mov	r3, r9
 8001e5e:	1891      	adds	r1, r2, r2
 8001e60:	6239      	str	r1, [r7, #32]
 8001e62:	415b      	adcs	r3, r3
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e6a:	4641      	mov	r1, r8
 8001e6c:	1854      	adds	r4, r2, r1
 8001e6e:	4649      	mov	r1, r9
 8001e70:	eb43 0501 	adc.w	r5, r3, r1
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	00eb      	lsls	r3, r5, #3
 8001e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e82:	00e2      	lsls	r2, r4, #3
 8001e84:	4614      	mov	r4, r2
 8001e86:	461d      	mov	r5, r3
 8001e88:	4643      	mov	r3, r8
 8001e8a:	18e3      	adds	r3, r4, r3
 8001e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e90:	464b      	mov	r3, r9
 8001e92:	eb45 0303 	adc.w	r3, r5, r3
 8001e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	008b      	lsls	r3, r1, #2
 8001eba:	4621      	mov	r1, r4
 8001ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	008a      	lsls	r2, r1, #2
 8001ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001ec8:	f7fe f98e 	bl	80001e8 <__aeabi_uldivmod>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4b60      	ldr	r3, [pc, #384]	; (8002054 <UART_SetConfig+0x4e4>)
 8001ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	011c      	lsls	r4, r3, #4
 8001eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ee4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001eec:	4642      	mov	r2, r8
 8001eee:	464b      	mov	r3, r9
 8001ef0:	1891      	adds	r1, r2, r2
 8001ef2:	61b9      	str	r1, [r7, #24]
 8001ef4:	415b      	adcs	r3, r3
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001efc:	4641      	mov	r1, r8
 8001efe:	1851      	adds	r1, r2, r1
 8001f00:	6139      	str	r1, [r7, #16]
 8001f02:	4649      	mov	r1, r9
 8001f04:	414b      	adcs	r3, r1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f14:	4659      	mov	r1, fp
 8001f16:	00cb      	lsls	r3, r1, #3
 8001f18:	4651      	mov	r1, sl
 8001f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f1e:	4651      	mov	r1, sl
 8001f20:	00ca      	lsls	r2, r1, #3
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	4642      	mov	r2, r8
 8001f2a:	189b      	adds	r3, r3, r2
 8001f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f30:	464b      	mov	r3, r9
 8001f32:	460a      	mov	r2, r1
 8001f34:	eb42 0303 	adc.w	r3, r2, r3
 8001f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f54:	4649      	mov	r1, r9
 8001f56:	008b      	lsls	r3, r1, #2
 8001f58:	4641      	mov	r1, r8
 8001f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f5e:	4641      	mov	r1, r8
 8001f60:	008a      	lsls	r2, r1, #2
 8001f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f66:	f7fe f93f 	bl	80001e8 <__aeabi_uldivmod>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4b38      	ldr	r3, [pc, #224]	; (8002054 <UART_SetConfig+0x4e4>)
 8001f72:	fba3 2301 	umull	r2, r3, r3, r1
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2264      	movs	r2, #100	; 0x64
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	1acb      	subs	r3, r1, r3
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	3332      	adds	r3, #50	; 0x32
 8001f84:	4a33      	ldr	r2, [pc, #204]	; (8002054 <UART_SetConfig+0x4e4>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f90:	441c      	add	r4, r3
 8001f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f96:	2200      	movs	r2, #0
 8001f98:	673b      	str	r3, [r7, #112]	; 0x70
 8001f9a:	677a      	str	r2, [r7, #116]	; 0x74
 8001f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	1891      	adds	r1, r2, r2
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	415b      	adcs	r3, r3
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fb0:	4641      	mov	r1, r8
 8001fb2:	1851      	adds	r1, r2, r1
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	4649      	mov	r1, r9
 8001fb8:	414b      	adcs	r3, r1
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001fc8:	4659      	mov	r1, fp
 8001fca:	00cb      	lsls	r3, r1, #3
 8001fcc:	4651      	mov	r1, sl
 8001fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fd2:	4651      	mov	r1, sl
 8001fd4:	00ca      	lsls	r2, r1, #3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4642      	mov	r2, r8
 8001fde:	189b      	adds	r3, r3, r2
 8001fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	eb42 0303 	adc.w	r3, r2, r3
 8001fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ff6:	667a      	str	r2, [r7, #100]	; 0x64
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002004:	4649      	mov	r1, r9
 8002006:	008b      	lsls	r3, r1, #2
 8002008:	4641      	mov	r1, r8
 800200a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800200e:	4641      	mov	r1, r8
 8002010:	008a      	lsls	r2, r1, #2
 8002012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002016:	f7fe f8e7 	bl	80001e8 <__aeabi_uldivmod>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <UART_SetConfig+0x4e4>)
 8002020:	fba3 1302 	umull	r1, r3, r3, r2
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	2164      	movs	r1, #100	; 0x64
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	3332      	adds	r3, #50	; 0x32
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <UART_SetConfig+0x4e4>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4422      	add	r2, r4
 8002046:	609a      	str	r2, [r3, #8]
}
 8002048:	bf00      	nop
 800204a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800204e:	46bd      	mov	sp, r7
 8002050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002054:	51eb851f 	.word	0x51eb851f

08002058 <__libc_init_array>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	4d0d      	ldr	r5, [pc, #52]	; (8002090 <__libc_init_array+0x38>)
 800205c:	4c0d      	ldr	r4, [pc, #52]	; (8002094 <__libc_init_array+0x3c>)
 800205e:	1b64      	subs	r4, r4, r5
 8002060:	10a4      	asrs	r4, r4, #2
 8002062:	2600      	movs	r6, #0
 8002064:	42a6      	cmp	r6, r4
 8002066:	d109      	bne.n	800207c <__libc_init_array+0x24>
 8002068:	4d0b      	ldr	r5, [pc, #44]	; (8002098 <__libc_init_array+0x40>)
 800206a:	4c0c      	ldr	r4, [pc, #48]	; (800209c <__libc_init_array+0x44>)
 800206c:	f000 f818 	bl	80020a0 <_init>
 8002070:	1b64      	subs	r4, r4, r5
 8002072:	10a4      	asrs	r4, r4, #2
 8002074:	2600      	movs	r6, #0
 8002076:	42a6      	cmp	r6, r4
 8002078:	d105      	bne.n	8002086 <__libc_init_array+0x2e>
 800207a:	bd70      	pop	{r4, r5, r6, pc}
 800207c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002080:	4798      	blx	r3
 8002082:	3601      	adds	r6, #1
 8002084:	e7ee      	b.n	8002064 <__libc_init_array+0xc>
 8002086:	f855 3b04 	ldr.w	r3, [r5], #4
 800208a:	4798      	blx	r3
 800208c:	3601      	adds	r6, #1
 800208e:	e7f2      	b.n	8002076 <__libc_init_array+0x1e>
 8002090:	080020e4 	.word	0x080020e4
 8002094:	080020e4 	.word	0x080020e4
 8002098:	080020e4 	.word	0x080020e4
 800209c:	080020e8 	.word	0x080020e8

080020a0 <_init>:
 80020a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a2:	bf00      	nop
 80020a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a6:	bc08      	pop	{r3}
 80020a8:	469e      	mov	lr, r3
 80020aa:	4770      	bx	lr

080020ac <_fini>:
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ae:	bf00      	nop
 80020b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b2:	bc08      	pop	{r3}
 80020b4:	469e      	mov	lr, r3
 80020b6:	4770      	bx	lr
