/*
 * F407_GPIO_Drivers.c
 *
 *  Created on: March 17, 2023
 *      Author: Ayuba Tahiru
 */


#include 	"stm32f407.h"


// Enable Clock
/********************************************************************************
 * @fn					-GPIO_PCLK_Control
 *
 * @brief				-Enable and Disable a clock of a given GPIO port
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-Takes Enable value(1) or Disable value(0)
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-GPIO port to be enable or disable base address must be passed
 */

void GPIO_PCLK_Control(GPIOx_RegDef_t *pGPIOx, uint8_t ED){
	if (ED == ENABLE){
		if (pGPIOx == GPIOA){
			GPIOA_PCLK_ENABLE();
		}else if (pGPIOx == GPIOB){
			GPIOB_PCLK_ENABLE();
		}else if (pGPIOx == GPIOC){
			GPIOC_PCLK_ENABLE();
		}else if (pGPIOx == GPIOD){
			GPIOD_PCLK_ENABLE();
		}else if (pGPIOx == GPIOE){
			GPIOE_PCLK_ENABLE();
		}else if (pGPIOx == GPIOF){
			GPIOF_PCLK_ENABLE();
		}else if (pGPIOx == GPIOG){
			GPIOG_PCLK_ENABLE();
		}else if (pGPIOx == GPIOH){
			GPIOH_PCLK_ENABLE();
		}else if (pGPIOx == GPIOI){
			GPIOI_PCLK_ENABLE();
		}
	}else {
		if (pGPIOx == GPIOA){
			GPIOA_PCLK_DISABLE();
		}else if (pGPIOx == GPIOB){
			GPIOB_PCLK_DISABLE();
		}else if (pGPIOx == GPIOC){
			GPIOC_PCLK_DISABLE();
		}else if (pGPIOx == GPIOD){
			GPIOD_PCLK_DISABLE();
		}else if (pGPIOx == GPIOE){
			GPIOE_PCLK_DISABLE();
		}else if (pGPIOx == GPIOF){
			GPIOF_PCLK_DISABLE();
		}else if (pGPIOx == GPIOG){
			GPIOG_PCLK_DISABLE();
		}else if (pGPIOx == GPIOH){
			GPIOH_PCLK_DISABLE();
		}else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DISABLE();
		}
	}

}


// Initialization
/********************************************************************************
 * @fn					-GPIO_Init
 *
 * @brief				-Initialize the various configurations of a given GPIO port
 *
 * @param[in]			-Takes GPIO handle address
 * @param[in]			-
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOxHandle){
	uint32_t temp = 0;  //Temporal register
	// 1. Pin mode Configure for non Interrupt
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOxHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
		pGPIOxHandle->pGPIOx->MODER |= temp;


	}else{
		//Pin mode Configure for non Interrupt
	//1. Configure the edge detection registers
		//1a. Configure falling edge trigger register
		if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FE_T){
			EXTI->RTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
		}	//1a. Configure rising edge trigger register
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RE_T){
			EXTI->FTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
		}	//1a. Configure both falling and rising edge trigger register
		if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FERE_T){
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
		}
	//2. Configure the GPIO port selection in External Interrupt Configuration Register (SYSCFG_EXTICR)
		uint8_t  temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
		uint8_t  temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
		uint8_t  portcode = GPIO_BASEADDR_TO_PCODE(pGPIOxHandle->pGPIOx);
		SYSCFG_PCLK_ENABLE();
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);

	//3. Enable the EXTI interrupt delivery using Interrupt Mask Address (IMR)
		EXTI->IMR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
	}

	// 2. Output type Configure
	temp = 0;
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinOType << (pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOxHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOxHandle->pGPIOx->OTYPER |= temp;

	// 3. Speed Configure
	temp = 0;
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOxHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOxHandle->pGPIOx->OSPEEDR |= temp;

	// 4. Pull Up Pull Down Configure
	temp = 0;
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOxHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOxHandle->pGPIOx->PUPDR |= temp;

	// 5.  Alternate Functionality Configure
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFUNC){
		uint8_t temp1, temp2= 0;
		temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
		temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 8;

		pGPIOxHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
		pGPIOxHandle->pGPIOx->AFR[temp1] |= (pGPIOxHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
	}


}

// De-Initialization
/********************************************************************************
 * @fn					-GPIO_DeInit
 *
 * @brief				-De-Initialize the various configurations of a given GPIO port
 *
 * @param[in]			-Takes GPIO handle address
 * @param[in]			-
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_DeInit(GPIOx_RegDef_t *pGPIOx){

	if (pGPIOx == GPIOA){
		GPIOA_RESET();
	}else if (pGPIOx == GPIOB){
		GPIOB_RESET();
	}else if (pGPIOx == GPIOC){
		GPIOC_RESET();
	}else if (pGPIOx == GPIOD){
		GPIOD_RESET();
	}else if (pGPIOx == GPIOE){
		GPIOE_RESET();
	}else if (pGPIOx == GPIOF){
		GPIOF_RESET();
	}else if (pGPIOx == GPIOG){
		GPIOG_RESET();
	}else if (pGPIOx == GPIOH){
		GPIOH_RESET();
	}else if (pGPIOx == GPIOI){
		GPIOI_RESET();
	}
}


//Read, Write data
/********************************************************************************
 * @fn					-GPIO_ReadFromInputPin
 *
 * @brief				-Reads data from GPIO pin
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-Takes pin number you want to read from
 * @param[in]			-
 *
 * @return				-returns read value (0 or 1)
 *
 * @Note				-None
 */
uint8_t GPIO_ReadFromInputPin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber){
	uint8_t value;
	value = (uint8_t)(pGPIOx->IDR >> PinNumber & 0x00000001);

	return value;
}


/********************************************************************************
 * @fn					-GPIO_ReadFromInputPort
 *
 * @brief				-Reads data from GPIO port
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-
 * @param[in]			-
 *
 * @return				-returns read value(16 bit data)
 *
 * @Note				-None
 */
uint16_t GPIO_ReadFromInputPort(GPIOx_RegDef_t *pGPIOx){
	uint16_t value;
	value = pGPIOx->IDR;

	return value;

}

/********************************************************************************
 * @fn					-GPIO_WriteToOutputPin
 *
 * @brief				-Write data to GPIO pin
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-Takes pin number you want to read from
 * @param[in]			-Takes the value you want to write
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void  GPIO_WriteToOutputPin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t PinValue){
	if (PinValue == GPIO_PIN_SET){
		pGPIOx->ODR &= ~(1 << PinNumber);
		pGPIOx->ODR |= (1 << PinNumber);
	}else{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}


}

/********************************************************************************
 * @fn					-GPIO_WriteToOutputPort
 *
 * @brief				-Write data to GPIO port
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-Takes the value you want to write to the port
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_WriteToOutputPort(GPIOx_RegDef_t *pGPIOx, uint16_t PortValue){
	pGPIOx->ODR = PortValue;
}

/********************************************************************************
 * @fn					-GPIO_TogglePin
 *
 * @brief				-Toggles Pin
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-Takes the pin number to toggle
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_TogglePin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber){
	pGPIOx->ODR ^= (1 << PinNumber);
}


// IRQ Configuration and Handling
/********************************************************************************
 * @fn					-GPIO_IRQInterruptConfig
 *
 * @brief				-Configure Interrupt
 *
 * @param[in]			-Takes IRQ number of the interrupt
 * @param[in]			-Takes the priority of IRQ of the interrupt
 * @param[in]			-Enable or Disable the IRQof the interrupt
 *
 * @return				-returns nothing(None)
 *
 * @Note				-I only programed NVIC register up to 2 because
						 the total number of interrupts in F407 is less than 90
 */
void GPIO_IRQInterruptConfig(uint8_t IRQ_Number, uint8_t IRQ_ED){
	if (IRQ_ED == ENABLE){
		//Enable Interrupts
		if (IRQ_Number <= 31){
			//Enable ISER_0
			*NVIC_ISER0_ADDR |= (1 << IRQ_Number);

		}else if (IRQ_Number > 31 && IRQ_Number < 64){
			//Enable ISER_1
			*NVIC_ISER1_ADDR |= (1 << IRQ_Number % 32);

		}else if (IRQ_Number > 64 && IRQ_Number < 96){
			//Enable ISER_2
			*NVIC_ISER2_ADDR |= (1 << IRQ_Number % 64);

		}
	}//Disable Interrupts
	else {
		if (IRQ_Number <= 31){
			//Enable ICER_0
			*NVIC_ICER0_ADDR |= (1 << IRQ_Number);

		}else if (IRQ_Number > 31 && IRQ_Number < 64){
			//Enable ICER_1
			*NVIC_ICER1_ADDR |= (1 << IRQ_Number % 32);

		}else if (IRQ_Number >= 64 && IRQ_Number < 96){
			//Enable ICER_2
			*NVIC_ICER2_ADDR |= (1 << IRQ_Number % 64);

		}
	}

}


// IRQ Priority Configuration
/********************************************************************************
 * @fn					-GPIO_IRQPriorityConfig
 *
 * @brief				-Configure Interrupt Priority
 *
 * @param[in]			-Takes the priority of IRQ of the interrupt
 * @param[in]			-Takes IRQ number of the interrupt
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-NVIC Priority register up to 60 with each register divided into 4
 */
void GPIO_IRQPriorityConfig(uint8_t IRQ_Priority, uint8_t IRQ_Number){


}
// IRQ Handling
/********************************************************************************
 * @fn					-GPIO_IRQHandling
 *
 * @brief				-Handle Interrupt pin
 *
 * @param[in]			-Takes interrupt pin to handle
 * @param[in]			-
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_IRQHandling(uint8_t PinNumber){


}
