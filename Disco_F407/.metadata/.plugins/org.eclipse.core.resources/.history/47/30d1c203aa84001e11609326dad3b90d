/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

/***					REGISTER ADDRESS CALCULATION			***/
#define RCC_AHB1ENR_REG_OFFSET									0x30UL
#define RCC_CFGR_REG_OFFSET										0x08UL
#define RCC_BASE_ADDRESS										0x40023800UL
#define RCC_CFGR_REG_ADDRESS									(RCC_BASE_ADDRESS + RCC_CFGR_REG_OFFSET)
#define RCC_AHB1ENR_REG_ADDRESS									(RCC_BASE_ADDRESS + RCC_AHB1ENR_REG_OFFSET)
#define GPIOA_BASE_ADDRESS            							0x40020000UL


int main(void){
   //pointer variable to hold CFGR Register Address
	uint32_t *pRccCfgReg = (uint32_t *)RCC_CFGR_REG_ADDRESS;

   //pointer variable to hold AHB1ENR Register Address
	uint32_t *pRccAhb1EnrReg = (uint32_t *)RCC_CFGR_REG_ADDRESS;

	//1. Configure the RCC_CFG Register to use HSI (Clear  Bit Position of MCO1 "21 and 22")
	*pRccCfgReg &= ~(0x3 << 21);

	//2. Configure PA8 to AF0 mode to behave as MCO1 signal
	//a. Enable GPIO peripheral clock (Set Bit Position of AHB1ENR "0" to 1)
	*pRccAhb1EnrReg |= (1 << 0);

	//b ) Configure the mode of GPIOA pin 8 as alternate function mode

	uint32_t *pGPIOAModeReg = (uint32_t*)(GPIOA_BASE_ADDRESS + 00);
	*pGPIOAModeReg &= ~( 0x3 << 16); //clear
	*pGPIOAModeReg |= ( 0x2 << 16);  //set

	//c ) Configure the alternation function register to set the mode 0 for PA8

	uint32_t *pGPIOAAltFunHighReg = (uint32_t*)(GPIOA_BASE_ADDRESS + 0x24);
	*pGPIOAAltFunHighReg &= ~( 0xf << 0);




    /* Loop forever */
	for(;;);
}
