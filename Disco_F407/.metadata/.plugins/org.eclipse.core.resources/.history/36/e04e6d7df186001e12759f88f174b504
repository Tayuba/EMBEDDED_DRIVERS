/*
 * F407_GPIO_Drivers.c
 *
 *  Created on: March 17, 2023
 *      Author: Ayuba Tahiru
 */


#include 	"F407_GPIO_Drivers.h"

// Enable Clock
/********************************************************************************
 * @fn					-GPIO_PCLK_Control
 *
 * @brief				-Enable and Disable a clock of a given GPIO port
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-Takes Enable value(1) or Disable value(0)
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-GPIO port to be enable or disable base address must be passed
 */

void GPIO_PCLK_Control(GPIOx_RegDef_t *pGPIOx, uint8_t ED){
	if (EN == ENABLE){
		if (pGPIOx == GPIOA){
			GPIOA_PCLK_ENABLE();
		}else if (pGPIOx == GPIOB){
			GPIOB_PCLK_ENABLE();
		}else if (pGPIOx == GPIOC){
			GPIOC_PCLK_ENABLE();
		}else if (pGPIOx == GPIOD){
			GPIOD_PCLK_ENABLE();
		}else if (pGPIOx == GPIOE){
			GPIOE_PCLK_ENABLE();
		}else if (pGPIOx == GPIOF){
			GPIOF_PCLK_ENABLE();
		}else if (pGPIOx == GPIOG){
			GPIOG_PCLK_ENABLE();
		}else if (pGPIOx == GPIOH){
			GPIOH_PCLK_ENABLE();
		}else if (pGPIOx == GPIOI){
			GPIOI_PCLK_ENABLE();
		}
	}else {
		if (pGPIOx == GPIOA){
			GPIOA_PCLK_DISABLE();
		}else if (pGPIOx == GPIOB){
			GPIOB_PCLK_DISABLE();
		}else if (pGPIOx == GPIOC){
			GPIOC_PCLK_DISABLE();
		}else if (pGPIOx == GPIOD){
			GPIOD_PCLK_DISABLE();
		}else if (pGPIOx == GPIOE){
			GPIOE_PCLK_DISABLE();
		}else if (pGPIOx == GPIOF){
			GPIOF_PCLK_DISABLE();
		}else if (pGPIOx == GPIOG){
			GPIOG_PCLK_DISABLE();
		}else if (pGPIOx == GPIOH){
			GPIOH_PCLK_DISABLE();
		}else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DISABLE();
		}
	}

}


// Initialization
/********************************************************************************
 * @fn					-GPIO_Init
 *
 * @brief				-Initialize the various configurations of a given GPIO port
 *
 * @param[in]			-Takes GPIO handle address
 * @param[in]			-
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOxHandle){
	// 1. Pin Config


	// 2. Mode Config

	// 3. Output type Config

	// 4. Speed Config

	// 7. Pull Up Pull Down Config

	// 6. Alternate Functionality Config

}

// De-Initialization
/********************************************************************************
 * @fn					-GPIO_DeInit
 *
 * @brief				-De-Initialize the various configurations of a given GPIO port
 *
 * @param[in]			-Takes GPIO handle address
 * @param[in]			-
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_DeInit(GPIOx_RegDef_t *pGPIOx){

}


//Read, Write data
/********************************************************************************
 * @fn					-GPIO_ReadFromInputPin
 *
 * @brief				-Reads data from GPIO pin
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-Takes pin number you want to read from
 * @param[in]			-
 *
 * @return				-returns read value
 *
 * @Note				-None
 */
uint8_t GPIO_ReadFromInputPin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber){

}


/********************************************************************************
 * @fn					-GPIO_ReadFromInputPort
 *
 * @brief				-Reads data from GPIO port
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-
 * @param[in]			-
 *
 * @return				-returns read value
 *
 * @Note				-None
 */
uint16_t GPIO_ReadFromInputPort(GPIOx_RegDef_t *pGPIOx){

}

/********************************************************************************
 * @fn					-GPIO_WriteToOutputPin
 *
 * @brief				-Write data to GPIO pin
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-Takes pin number you want to read from
 * @param[in]			-Takes the value you want to write
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void  GPIO_WriteToOutputPin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t PinValue){

}

/********************************************************************************
 * @fn					-GPIO_WriteToOutputPort
 *
 * @brief				-Write data to GPIO port
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-Takes the value you want to write to the port
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_WriteToOutputPort(GPIOx_RegDef_t *pGPIOx, uint16_t PortValue){

}

/********************************************************************************
 * @fn					-GPIO_TogglePin
 *
 * @brief				-Toggles Pin
 *
 * @param[in]			-Takes base address of a given GPIO
 * @param[in]			-Takes the pin number to toggle
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_TogglePin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber){


}


// IRQ Configuration and Handling
/********************************************************************************
 * @fn					-GPIO_IRQConfig
 *
 * @brief				-Configure Interrupt
 *
 * @param[in]			-Takes IRQ number of the interrupt
 * @param[in]			-Takes the priority of IRQ of the interrupt
 * @param[in]			-Enable or Disable the IRQof the interrupt
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_IRQConfig(uint8_t IRQ_Number, uint8_t IRQ_Priority, uint8_t IRQ_ED){

}

/********************************************************************************
 * @fn					-GPIO_IRQHandling
 *
 * @brief				-Handle Interrupt pin
 *
 * @param[in]			-Takes interrupt pin to handle
 * @param[in]			-
 * @param[in]			-
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_IRQHandling(uint8_t PinNumber){


}
