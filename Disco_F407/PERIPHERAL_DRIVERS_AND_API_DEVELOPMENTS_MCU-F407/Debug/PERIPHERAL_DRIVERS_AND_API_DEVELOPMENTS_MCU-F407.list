
PERIPHERAL_DRIVERS_AND_API_DEVELOPMENTS_MCU-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b04  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cac  08000cb4  00010cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cac  08000cac  00010cb4  2**0
                  CONTENTS
  4 .ARM          00000000  08000cac  08000cac  00010cb4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cac  08000cb4  00010cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cac  08000cac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010cb4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010cb4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010cde  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001530  00000000  00000000  00010d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000005a1  00000000  00000000  00012251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001a0  00000000  00000000  000127f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000130  00000000  00000000  00012998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002369  00000000  00000000  00012ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001bf4  00000000  00000000  00014e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a0d2  00000000  00000000  00016a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000061c  00000000  00000000  00020af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00021114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c94 	.word	0x08000c94

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000c94 	.word	0x08000c94

080001e8 <main>:
#define ANALOG_PIN1               1
#define ANALOG_PIN2               2
#define ANALOG_PIN3               3
#define ANALOG_PIN4               4

int main(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	// Dummy byte
	uint8_t dummy = 0xFF;
 80001ee:	23ff      	movs	r3, #255	; 0xff
 80001f0:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy_read;


	// Function to Initialize GPIO as SPI2
	InitGPIO_toSPI2_Pins();
 80001f2:	f000 f857 	bl	80002a4 <InitGPIO_toSPI2_Pins>

	// Function to Initialize SPI2
	Init_SPI2();
 80001f6:	f000 f883 	bl	8000300 <Init_SPI2>

	// Initialize Button
	ButtenPush();
 80001fa:	f000 f89f 	bl	800033c <ButtenPush>
	// Enable SSOE
	SSOE_Config(SPI2, ENABLE);
 80001fe:	2101      	movs	r1, #1
 8000200:	4826      	ldr	r0, [pc, #152]	; (800029c <main+0xb4>)
 8000202:	f000 fc22 	bl	8000a4a <SSOE_Config>

	while(1){


		while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == FLAG_RESET);
 8000206:	bf00      	nop
 8000208:	2100      	movs	r1, #0
 800020a:	4825      	ldr	r0, [pc, #148]	; (80002a0 <main+0xb8>)
 800020c:	f000 fb8e 	bl	800092c <GPIO_ReadFromInputPin>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f8      	beq.n	8000208 <main+0x20>
		delay();
 8000216:	f000 f8a9 	bl	800036c <delay>

		// Enable SPI Protocol
		SPI_ProtocolEnable(SPI2, ENABLE);
 800021a:	2101      	movs	r1, #1
 800021c:	481f      	ldr	r0, [pc, #124]	; (800029c <main+0xb4>)
 800021e:	f000 fbf9 	bl	8000a14 <SPI_ProtocolEnable>

		uint8_t ack;
		uint8_t args[2];

		/*Send command to control LED, give pin number and value to turn ON or OFF*/
		uint8_t ledcommand = COMMAND_LED_CTRL;
 8000222:	2350      	movs	r3, #80	; 0x50
 8000224:	71fb      	strb	r3, [r7, #7]
		SPI_DataSend(SPI2, &ledcommand, 1);
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2201      	movs	r2, #1
 800022a:	4619      	mov	r1, r3
 800022c:	481b      	ldr	r0, [pc, #108]	; (800029c <main+0xb4>)
 800022e:	f000 fc9f 	bl	8000b70 <SPI_DataSend>

		// dummy read
		SPI_DataReceive(SPI2, &dummy_read, 1);
 8000232:	f107 030e 	add.w	r3, r7, #14
 8000236:	2201      	movs	r2, #1
 8000238:	4619      	mov	r1, r3
 800023a:	4818      	ldr	r0, [pc, #96]	; (800029c <main+0xb4>)
 800023c:	f000 fccf 	bl	8000bde <SPI_DataReceive>

		// Send dummy byte to shift slave ack to master
		SPI_DataSend(SPI2, &dummy, 1);
 8000240:	f107 030f 	add.w	r3, r7, #15
 8000244:	2201      	movs	r2, #1
 8000246:	4619      	mov	r1, r3
 8000248:	4814      	ldr	r0, [pc, #80]	; (800029c <main+0xb4>)
 800024a:	f000 fc91 	bl	8000b70 <SPI_DataSend>

		// Receive the ack from slave
		SPI_DataReceive(SPI2, &ack, 1);
 800024e:	f107 030d 	add.w	r3, r7, #13
 8000252:	2201      	movs	r2, #1
 8000254:	4619      	mov	r1, r3
 8000256:	4811      	ldr	r0, [pc, #68]	; (800029c <main+0xb4>)
 8000258:	f000 fcc1 	bl	8000bde <SPI_DataReceive>

//		// Send Data
//		SPI_DataSend(SPI2, (uint8_t*)data, data_Len);

		// Verify value of ack
		if (SPI_ackVerify(ack)){
 800025c:	7b7b      	ldrb	r3, [r7, #13]
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f89a 	bl	8000398 <SPI_ackVerify>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d00a      	beq.n	8000280 <main+0x98>
			// give pin number and value to turn ON or OFF
			args[0] = LED_PIN;
 800026a:	2309      	movs	r3, #9
 800026c:	723b      	strb	r3, [r7, #8]
			args[1] = LED_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	727b      	strb	r3, [r7, #9]
			SPI_DataSend(SPI2, args, 2);
 8000272:	f107 0308 	add.w	r3, r7, #8
 8000276:	2202      	movs	r2, #2
 8000278:	4619      	mov	r1, r3
 800027a:	4808      	ldr	r0, [pc, #32]	; (800029c <main+0xb4>)
 800027c:	f000 fc78 	bl	8000b70 <SPI_DataSend>
		}

		// Tx Finished
		while(Check_FlagStatus(SPI2, SPI_BUSY_FLAG));
 8000280:	bf00      	nop
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <main+0xb4>)
 8000286:	f000 fc60 	bl	8000b4a <Check_FlagStatus>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d1f8      	bne.n	8000282 <main+0x9a>
		SPI_ProtocolEnable(SPI2, DISABLE);
 8000290:	2100      	movs	r1, #0
 8000292:	4802      	ldr	r0, [pc, #8]	; (800029c <main+0xb4>)
 8000294:	f000 fbbe 	bl	8000a14 <SPI_ProtocolEnable>
	while(1){
 8000298:	e7b5      	b.n	8000206 <main+0x1e>
 800029a:	bf00      	nop
 800029c:	40003800 	.word	0x40003800
 80002a0:	40020000 	.word	0x40020000

080002a4 <InitGPIO_toSPI2_Pins>:


	return 0;
}

void InitGPIO_toSPI2_Pins(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
	// Call My API GPIO Handle typedef struct
	GPIO_Handle_t SPI_Pins;

	// Select GPIO Port base address where SPI2 is connected
	SPI_Pins.pGPIOx = GPIOB;
 80002aa:	4b14      	ldr	r3, [pc, #80]	; (80002fc <InitGPIO_toSPI2_Pins+0x58>)
 80002ac:	607b      	str	r3, [r7, #4]

/*
************** Configure GPIOB to become SPI *****************
* */
	// 1. Pin Mode set to Alternate function
	SPI_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUNC;
 80002ae:	2302      	movs	r3, #2
 80002b0:	727b      	strb	r3, [r7, #9]
	// 2. Select Alternate Function Number to be 5
	SPI_Pins.GPIO_PinConfig.GPIO_PinAltFuncMode = 5;
 80002b2:	2305      	movs	r3, #5
 80002b4:	737b      	strb	r3, [r7, #13]
	// 3. Using Push Pull Output type for SPI
	SPI_Pins.GPIO_PinConfig.GPIO_PinOType = GPIO_OTYPE_PP;
 80002b6:	2300      	movs	r3, #0
 80002b8:	72bb      	strb	r3, [r7, #10]
	// 4. Pin Control
	SPI_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ba:	2300      	movs	r3, #0
 80002bc:	733b      	strb	r3, [r7, #12]
	// 5. Speed
	SPI_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_MEDIUM;
 80002be:	2301      	movs	r3, #1
 80002c0:	72fb      	strb	r3, [r7, #11]

	/************** Pin Number Initialization *******************/
	// 1. SCK
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002c2:	230d      	movs	r3, #13
 80002c4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f987 	bl	80005dc <GPIO_Init>
	// 2. NSS
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002ce:	230c      	movs	r3, #12
 80002d0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 f981 	bl	80005dc <GPIO_Init>
	// 3. MISO
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002da:	230e      	movs	r3, #14
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 f97b 	bl	80005dc <GPIO_Init>
	// 4. MOSI
	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002e6:	230f      	movs	r3, #15
 80002e8:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&SPI_Pins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f975 	bl	80005dc <GPIO_Init>

}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020400 	.word	0x40020400

08000300 <Init_SPI2>:

void Init_SPI2(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
	// Call My API SPI2 Handle typedef struct
	SPI_Handle_t SPI2_Pins;

	// Select SPI2
	SPI2_Pins.pSPIx = SPI2;
 8000306:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <Init_SPI2+0x38>)
 8000308:	603b      	str	r3, [r7, #0]

/*
	************** Configure SPI2 *****************
* */
	// 1. SPI Bus as Full Duplex
	SPI2_Pins.SPI_PinConfig.SPI_BusConfig = SPI_BUS_CONFIG_FULL_DUPLEX;
 800030a:	2301      	movs	r3, #1
 800030c:	717b      	strb	r3, [r7, #5]
	// 2. SPI Mode as Master
	SPI2_Pins.SPI_PinConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800030e:	2301      	movs	r3, #1
 8000310:	713b      	strb	r3, [r7, #4]
	// 3. SPI Speed as Maximum (2MHz)
	SPI2_Pins.SPI_PinConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 8000312:	2302      	movs	r3, #2
 8000314:	71bb      	strb	r3, [r7, #6]
	// 4. SPI DFF  as 8 Bits
	SPI2_Pins.SPI_PinConfig.SPI_DFF = SPI_DFF_8BITS;
 8000316:	2300      	movs	r3, #0
 8000318:	71fb      	strb	r3, [r7, #7]
	// 5. Clock Polarity
	SPI2_Pins.SPI_PinConfig.SPI_CPOL = SPI_CPOL_LOW;
 800031a:	2300      	movs	r3, #0
 800031c:	723b      	strb	r3, [r7, #8]
	// 6. Clock Phase
	SPI2_Pins.SPI_PinConfig.SPI_CPHA = SPI_CPHA_LOW;
 800031e:	2300      	movs	r3, #0
 8000320:	727b      	strb	r3, [r7, #9]
	// 7. Slave management
	SPI2_Pins.SPI_PinConfig.SPI_SSM = SPI_SSM_HW;
 8000322:	2300      	movs	r3, #0
 8000324:	72bb      	strb	r3, [r7, #10]

	// Initialize configuration
	SPI_Init(&SPI2_Pins);
 8000326:	463b      	mov	r3, r7
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fba9 	bl	8000a80 <SPI_Init>

}
 800032e:	bf00      	nop
 8000330:	3720      	adds	r7, #32
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40003800 	.word	0x40003800

0800033c <ButtenPush>:

void ButtenPush(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0

	GPIO_Handle_t BTN_A0;

	//Button Configuration
	BTN_A0.pGPIOx = GPIOA;
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <ButtenPush+0x2c>)
 8000344:	607b      	str	r3, [r7, #4]
	BTN_A0.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000346:	2300      	movs	r3, #0
 8000348:	723b      	strb	r3, [r7, #8]
	BTN_A0.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 800034a:	2300      	movs	r3, #0
 800034c:	727b      	strb	r3, [r7, #9]
	BTN_A0.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_MEDIUM;
 800034e:	2301      	movs	r3, #1
 8000350:	72fb      	strb	r3, [r7, #11]
	BTN_A0.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_NO_PUPD;
 8000352:	2300      	movs	r3, #0
 8000354:	733b      	strb	r3, [r7, #12]

	// CALLING My API
//	GPIO_PCLK_Control(GPIOA, ENABLE);		// Enable the clock
	GPIO_Init(&BTN_A0);						// Initialize the GPIOA
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f93f 	bl	80005dc <GPIO_Init>
}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40020000 	.word	0x40020000

0800036c <delay>:

void delay(void){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i <500000/2; i++){
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	e002      	b.n	800037e <delay+0x12>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <delay+0x28>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d9f8      	bls.n	8000378 <delay+0xc>

	}
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	0003d08f 	.word	0x0003d08f

08000398 <SPI_ackVerify>:

uint8_t SPI_ackVerify(uint8_t ack){
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
	if(ack == ACK){
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2bf5      	cmp	r3, #245	; 0xf5
 80003a6:	d101      	bne.n	80003ac <SPI_ackVerify+0x14>
		// Verified
		return 1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	e000      	b.n	80003ae <SPI_ackVerify+0x16>
	}
	// Not verified
	return 0;
 80003ac:	2300      	movs	r3, #0

}
 80003ae:	4618      	mov	r0, r3
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b8:	480d      	ldr	r0, [pc, #52]	; (80003f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c2:	490d      	ldr	r1, [pc, #52]	; (80003f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c4:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <LoopForever+0xe>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c8:	e002      	b.n	80003d0 <LoopCopyDataInit>

080003ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ce:	3304      	adds	r3, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d4:	d3f9      	bcc.n	80003ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d6:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d8:	4c0a      	ldr	r4, [pc, #40]	; (8000404 <LoopForever+0x16>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003dc:	e001      	b.n	80003e2 <LoopFillZerobss>

080003de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e0:	3204      	adds	r2, #4

080003e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e4:	d3fb      	bcc.n	80003de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e6:	f000 fc31 	bl	8000c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ea:	f7ff fefd 	bl	80001e8 <main>

080003ee <LoopForever>:

LoopForever:
  b LoopForever
 80003ee:	e7fe      	b.n	80003ee <LoopForever>
  ldr   r0, =_estack
 80003f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003fc:	08000cb4 	.word	0x08000cb4
  ldr r2, =_sbss
 8000400:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000404:	2000001c 	.word	0x2000001c

08000408 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_IRQHandler>
	...

0800040c <GPIO_PCLK_Control>:
 * @return				-returns nothing(None)
 *
 * @Note				-GPIO port to be enable or disable base address must be passed
 */

void GPIO_PCLK_Control(GPIOx_RegDef_t *pGPIOx, uint8_t ED){
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	460b      	mov	r3, r1
 8000416:	70fb      	strb	r3, [r7, #3]
	if (ED == ENABLE){
 8000418:	78fb      	ldrb	r3, [r7, #3]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d162      	bne.n	80004e4 <GPIO_PCLK_Control+0xd8>
		if (pGPIOx == GPIOA){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a64      	ldr	r2, [pc, #400]	; (80005b4 <GPIO_PCLK_Control+0x1a8>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PCLK_Control+0x28>
			GPIOA_PCLK_ENABLE();
 8000426:	4b64      	ldr	r3, [pc, #400]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	4a63      	ldr	r2, [pc, #396]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DISABLE();
		}
	}

}
 8000432:	e0b9      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOB){
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a61      	ldr	r2, [pc, #388]	; (80005bc <GPIO_PCLK_Control+0x1b0>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PCLK_Control+0x3e>
			GPIOB_PCLK_ENABLE();
 800043c:	4b5e      	ldr	r3, [pc, #376]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000440:	4a5d      	ldr	r2, [pc, #372]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000442:	f043 0302 	orr.w	r3, r3, #2
 8000446:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000448:	e0ae      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOC){
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a5c      	ldr	r2, [pc, #368]	; (80005c0 <GPIO_PCLK_Control+0x1b4>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PCLK_Control+0x54>
			GPIOC_PCLK_ENABLE();
 8000452:	4b59      	ldr	r3, [pc, #356]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a58      	ldr	r2, [pc, #352]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000458:	f043 0304 	orr.w	r3, r3, #4
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045e:	e0a3      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOD){
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a58      	ldr	r2, [pc, #352]	; (80005c4 <GPIO_PCLK_Control+0x1b8>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PCLK_Control+0x6a>
			GPIOD_PCLK_ENABLE();
 8000468:	4b53      	ldr	r3, [pc, #332]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a52      	ldr	r2, [pc, #328]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000474:	e098      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOE){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a53      	ldr	r2, [pc, #332]	; (80005c8 <GPIO_PCLK_Control+0x1bc>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PCLK_Control+0x80>
			GPIOE_PCLK_ENABLE();
 800047e:	4b4e      	ldr	r3, [pc, #312]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4a4d      	ldr	r2, [pc, #308]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000484:	f043 0310 	orr.w	r3, r3, #16
 8000488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048a:	e08d      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOF){
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a4f      	ldr	r2, [pc, #316]	; (80005cc <GPIO_PCLK_Control+0x1c0>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PCLK_Control+0x96>
			GPIOF_PCLK_ENABLE();
 8000494:	4b48      	ldr	r3, [pc, #288]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000498:	4a47      	ldr	r2, [pc, #284]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 800049a:	f043 0320 	orr.w	r3, r3, #32
 800049e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a0:	e082      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOG){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a4a      	ldr	r2, [pc, #296]	; (80005d0 <GPIO_PCLK_Control+0x1c4>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PCLK_Control+0xac>
			GPIOG_PCLK_ENABLE();
 80004aa:	4b43      	ldr	r3, [pc, #268]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ae:	4a42      	ldr	r2, [pc, #264]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 80004b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b6:	e077      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOH){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a46      	ldr	r2, [pc, #280]	; (80005d4 <GPIO_PCLK_Control+0x1c8>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d106      	bne.n	80004ce <GPIO_PCLK_Control+0xc2>
			GPIOH_PCLK_ENABLE();
 80004c0:	4b3d      	ldr	r3, [pc, #244]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a3c      	ldr	r2, [pc, #240]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 80004c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004cc:	e06c      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOI){
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a41      	ldr	r2, [pc, #260]	; (80005d8 <GPIO_PCLK_Control+0x1cc>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d168      	bne.n	80005a8 <GPIO_PCLK_Control+0x19c>
			GPIOI_PCLK_ENABLE();
 80004d6:	4b38      	ldr	r3, [pc, #224]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a37      	ldr	r2, [pc, #220]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 80004dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e2:	e061      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		if (pGPIOx == GPIOA){
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a33      	ldr	r2, [pc, #204]	; (80005b4 <GPIO_PCLK_Control+0x1a8>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PCLK_Control+0xee>
			GPIOA_PCLK_DISABLE();
 80004ec:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	4a31      	ldr	r2, [pc, #196]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 80004f2:	f023 0301 	bic.w	r3, r3, #1
 80004f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f8:	e056      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOB){
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a2f      	ldr	r2, [pc, #188]	; (80005bc <GPIO_PCLK_Control+0x1b0>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_PCLK_Control+0x104>
			GPIOB_PCLK_DISABLE();
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a2c      	ldr	r2, [pc, #176]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000508:	f023 0302 	bic.w	r3, r3, #2
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050e:	e04b      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOC){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a2b      	ldr	r2, [pc, #172]	; (80005c0 <GPIO_PCLK_Control+0x1b4>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <GPIO_PCLK_Control+0x11a>
			GPIOC_PCLK_DISABLE();
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051c:	4a26      	ldr	r2, [pc, #152]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 800051e:	f023 0304 	bic.w	r3, r3, #4
 8000522:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000524:	e040      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOD){
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a26      	ldr	r2, [pc, #152]	; (80005c4 <GPIO_PCLK_Control+0x1b8>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d106      	bne.n	800053c <GPIO_PCLK_Control+0x130>
			GPIOD_PCLK_DISABLE();
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000534:	f023 0308 	bic.w	r3, r3, #8
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053a:	e035      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOE){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <GPIO_PCLK_Control+0x1bc>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d106      	bne.n	8000552 <GPIO_PCLK_Control+0x146>
			GPIOE_PCLK_DISABLE();
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 800054a:	f023 0310 	bic.w	r3, r3, #16
 800054e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000550:	e02a      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOF){
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <GPIO_PCLK_Control+0x1c0>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <GPIO_PCLK_Control+0x15c>
			GPIOF_PCLK_DISABLE();
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000560:	f023 0320 	bic.w	r3, r3, #32
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000566:	e01f      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOG){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a19      	ldr	r2, [pc, #100]	; (80005d0 <GPIO_PCLK_Control+0x1c4>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d106      	bne.n	800057e <GPIO_PCLK_Control+0x172>
			GPIOG_PCLK_DISABLE();
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800057a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057c:	e014      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOH){
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <GPIO_PCLK_Control+0x1c8>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d106      	bne.n	8000594 <GPIO_PCLK_Control+0x188>
			GPIOH_PCLK_DISABLE();
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 800058c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000592:	e009      	b.n	80005a8 <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOI){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a10      	ldr	r2, [pc, #64]	; (80005d8 <GPIO_PCLK_Control+0x1cc>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d105      	bne.n	80005a8 <GPIO_PCLK_Control+0x19c>
			GPIOI_PCLK_DISABLE();
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <GPIO_PCLK_Control+0x1ac>)
 80005a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40020000 	.word	0x40020000
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40020400 	.word	0x40020400
 80005c0:	40020800 	.word	0x40020800
 80005c4:	40020c00 	.word	0x40020c00
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40021400 	.word	0x40021400
 80005d0:	40021800 	.word	0x40021800
 80005d4:	40021c00 	.word	0x40021c00
 80005d8:	40022000 	.word	0x40022000

080005dc <GPIO_Init>:
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOxHandle){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;  //Temporal register
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]

	// Enable clock before use
	GPIO_PCLK_Control(pGPIOxHandle->pGPIOx, ENABLE);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2101      	movs	r1, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff0c 	bl	800040c <GPIO_PCLK_Control>

	// Pin mode Configure for non Interrupt
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	795b      	ldrb	r3, [r3, #5]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	d81f      	bhi.n	800063c <GPIO_Init+0x60>
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	795b      	ldrb	r3, [r3, #5]
 8000600:	461a      	mov	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	617b      	str	r3, [r7, #20]
		pGPIOxHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber); //clear pins before writing new values
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	4619      	mov	r1, r3
 800061a:	2303      	movs	r3, #3
 800061c:	408b      	lsls	r3, r1
 800061e:	43db      	mvns	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	400a      	ands	r2, r1
 8000628:	601a      	str	r2, [r3, #0]
		pGPIOxHandle->pGPIOx->MODER |= temp;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	697a      	ldr	r2, [r7, #20]
 8000636:	430a      	orrs	r2, r1
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	e0d1      	b.n	80007e0 <GPIO_Init+0x204>

	}else{
	//Pin mode Configure for  Interrupt
	//1a. Configure the edge detection registers
		//1a. Configure falling edge trigger register
		if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FE_T){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	795b      	ldrb	r3, [r3, #5]
 8000640:	2b04      	cmp	r3, #4
 8000642:	d117      	bne.n	8000674 <GPIO_Init+0x98>
			EXTI->RTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber); //clear rising edge before writing new values
 8000644:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <GPIO_Init+0x194>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7912      	ldrb	r2, [r2, #4]
 800064c:	4611      	mov	r1, r2
 800064e:	2201      	movs	r2, #1
 8000650:	408a      	lsls	r2, r1
 8000652:	43d2      	mvns	r2, r2
 8000654:	4611      	mov	r1, r2
 8000656:	4a46      	ldr	r2, [pc, #280]	; (8000770 <GPIO_Init+0x194>)
 8000658:	400b      	ands	r3, r1
 800065a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065c:	4b44      	ldr	r3, [pc, #272]	; (8000770 <GPIO_Init+0x194>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	7912      	ldrb	r2, [r2, #4]
 8000664:	4611      	mov	r1, r2
 8000666:	2201      	movs	r2, #1
 8000668:	408a      	lsls	r2, r1
 800066a:	4611      	mov	r1, r2
 800066c:	4a40      	ldr	r2, [pc, #256]	; (8000770 <GPIO_Init+0x194>)
 800066e:	430b      	orrs	r3, r1
 8000670:	60d3      	str	r3, [r2, #12]
 8000672:	e035      	b.n	80006e0 <GPIO_Init+0x104>
		}	//2a. Configure rising edge trigger register
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RE_T){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	795b      	ldrb	r3, [r3, #5]
 8000678:	2b05      	cmp	r3, #5
 800067a:	d117      	bne.n	80006ac <GPIO_Init+0xd0>
			EXTI->FTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber); //clear falling edge before writing new values
 800067c:	4b3c      	ldr	r3, [pc, #240]	; (8000770 <GPIO_Init+0x194>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	7912      	ldrb	r2, [r2, #4]
 8000684:	4611      	mov	r1, r2
 8000686:	2201      	movs	r2, #1
 8000688:	408a      	lsls	r2, r1
 800068a:	43d2      	mvns	r2, r2
 800068c:	4611      	mov	r1, r2
 800068e:	4a38      	ldr	r2, [pc, #224]	; (8000770 <GPIO_Init+0x194>)
 8000690:	400b      	ands	r3, r1
 8000692:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000694:	4b36      	ldr	r3, [pc, #216]	; (8000770 <GPIO_Init+0x194>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7912      	ldrb	r2, [r2, #4]
 800069c:	4611      	mov	r1, r2
 800069e:	2201      	movs	r2, #1
 80006a0:	408a      	lsls	r2, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a32      	ldr	r2, [pc, #200]	; (8000770 <GPIO_Init+0x194>)
 80006a6:	430b      	orrs	r3, r1
 80006a8:	6093      	str	r3, [r2, #8]
 80006aa:	e019      	b.n	80006e0 <GPIO_Init+0x104>
		}	//3a. Configure both falling and rising edge trigger register
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FERE_T){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d115      	bne.n	80006e0 <GPIO_Init+0x104>
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b4:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <GPIO_Init+0x194>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	7912      	ldrb	r2, [r2, #4]
 80006bc:	4611      	mov	r1, r2
 80006be:	2201      	movs	r2, #1
 80006c0:	408a      	lsls	r2, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <GPIO_Init+0x194>)
 80006c6:	430b      	orrs	r3, r1
 80006c8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ca:	4b29      	ldr	r3, [pc, #164]	; (8000770 <GPIO_Init+0x194>)
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	7912      	ldrb	r2, [r2, #4]
 80006d2:	4611      	mov	r1, r2
 80006d4:	2201      	movs	r2, #1
 80006d6:	408a      	lsls	r2, r1
 80006d8:	4611      	mov	r1, r2
 80006da:	4a25      	ldr	r2, [pc, #148]	; (8000770 <GPIO_Init+0x194>)
 80006dc:	430b      	orrs	r3, r1
 80006de:	6093      	str	r3, [r2, #8]
		}
	//2b. Configure the GPIO port selection in External Interrupt Configuration Register (SYSCFG_EXTICR)
		uint8_t  temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	089b      	lsrs	r3, r3, #2
 80006e6:	74fb      	strb	r3, [r7, #19]
		uint8_t  temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	f003 0303 	and.w	r3, r3, #3
 80006f0:	74bb      	strb	r3, [r7, #18]
		uint8_t  portcode = GPIO_BASEADDR_TO_PCODE(pGPIOxHandle->pGPIOx);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <GPIO_Init+0x198>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d04d      	beq.n	8000798 <GPIO_Init+0x1bc>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <GPIO_Init+0x19c>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d032      	beq.n	800076c <GPIO_Init+0x190>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <GPIO_Init+0x1a0>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d02b      	beq.n	8000768 <GPIO_Init+0x18c>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <GPIO_Init+0x1a4>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d024      	beq.n	8000764 <GPIO_Init+0x188>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a19      	ldr	r2, [pc, #100]	; (8000784 <GPIO_Init+0x1a8>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d01d      	beq.n	8000760 <GPIO_Init+0x184>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a17      	ldr	r2, [pc, #92]	; (8000788 <GPIO_Init+0x1ac>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d016      	beq.n	800075c <GPIO_Init+0x180>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <GPIO_Init+0x1b0>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d00f      	beq.n	8000758 <GPIO_Init+0x17c>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <GPIO_Init+0x1b4>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d008      	beq.n	8000754 <GPIO_Init+0x178>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <GPIO_Init+0x1b8>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d101      	bne.n	8000750 <GPIO_Init+0x174>
 800074c:	2308      	movs	r3, #8
 800074e:	e024      	b.n	800079a <GPIO_Init+0x1be>
 8000750:	2300      	movs	r3, #0
 8000752:	e022      	b.n	800079a <GPIO_Init+0x1be>
 8000754:	2307      	movs	r3, #7
 8000756:	e020      	b.n	800079a <GPIO_Init+0x1be>
 8000758:	2306      	movs	r3, #6
 800075a:	e01e      	b.n	800079a <GPIO_Init+0x1be>
 800075c:	2305      	movs	r3, #5
 800075e:	e01c      	b.n	800079a <GPIO_Init+0x1be>
 8000760:	2304      	movs	r3, #4
 8000762:	e01a      	b.n	800079a <GPIO_Init+0x1be>
 8000764:	2303      	movs	r3, #3
 8000766:	e018      	b.n	800079a <GPIO_Init+0x1be>
 8000768:	2302      	movs	r3, #2
 800076a:	e016      	b.n	800079a <GPIO_Init+0x1be>
 800076c:	2301      	movs	r3, #1
 800076e:	e014      	b.n	800079a <GPIO_Init+0x1be>
 8000770:	40013c00 	.word	0x40013c00
 8000774:	40020000 	.word	0x40020000
 8000778:	40020400 	.word	0x40020400
 800077c:	40020800 	.word	0x40020800
 8000780:	40020c00 	.word	0x40020c00
 8000784:	40021000 	.word	0x40021000
 8000788:	40021400 	.word	0x40021400
 800078c:	40021800 	.word	0x40021800
 8000790:	40021c00 	.word	0x40021c00
 8000794:	40022000 	.word	0x40022000
 8000798:	2300      	movs	r3, #0
 800079a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_ENABLE();
 800079c:	4b60      	ldr	r3, [pc, #384]	; (8000920 <GPIO_Init+0x344>)
 800079e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a0:	4a5f      	ldr	r2, [pc, #380]	; (8000920 <GPIO_Init+0x344>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 80007a8:	4a5e      	ldr	r2, [pc, #376]	; (8000924 <GPIO_Init+0x348>)
 80007aa:	7cfb      	ldrb	r3, [r7, #19]
 80007ac:	3302      	adds	r3, #2
 80007ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b2:	7c79      	ldrb	r1, [r7, #17]
 80007b4:	7cbb      	ldrb	r3, [r7, #18]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	4959      	ldr	r1, [pc, #356]	; (8000924 <GPIO_Init+0x348>)
 80007c0:	7cfb      	ldrb	r3, [r7, #19]
 80007c2:	4302      	orrs	r2, r0
 80007c4:	3302      	adds	r3, #2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3c. Enable the EXTI interrupt delivery using Interrupt Mask Address (IMR)
		EXTI->IMR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ca:	4b57      	ldr	r3, [pc, #348]	; (8000928 <GPIO_Init+0x34c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	7912      	ldrb	r2, [r2, #4]
 80007d2:	4611      	mov	r1, r2
 80007d4:	2201      	movs	r2, #1
 80007d6:	408a      	lsls	r2, r1
 80007d8:	4611      	mov	r1, r2
 80007da:	4a53      	ldr	r2, [pc, #332]	; (8000928 <GPIO_Init+0x34c>)
 80007dc:	430b      	orrs	r3, r1
 80007de:	6013      	str	r3, [r2, #0]
	}

	// 2. Output type Configure
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUTPUT){
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	795b      	ldrb	r3, [r3, #5]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d161      	bne.n	80008ac <GPIO_Init+0x2d0>
		temp = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinOType << (pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	799b      	ldrb	r3, [r3, #6]
 80007f0:	461a      	mov	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	617b      	str	r3, [r7, #20]
		pGPIOxHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber); //clear pin before writing new values
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	4619      	mov	r1, r3
 8000808:	2301      	movs	r3, #1
 800080a:	408b      	lsls	r3, r1
 800080c:	43db      	mvns	r3, r3
 800080e:	4619      	mov	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	400a      	ands	r2, r1
 8000816:	605a      	str	r2, [r3, #4]
		pGPIOxHandle->pGPIOx->OTYPER |= temp;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6859      	ldr	r1, [r3, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	430a      	orrs	r2, r1
 8000826:	605a      	str	r2, [r3, #4]

		// 3. Speed Configure
		temp = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	79db      	ldrb	r3, [r3, #7]
 8000830:	461a      	mov	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	617b      	str	r3, [r7, #20]
		pGPIOxHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber); //clear pins before writing new values
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	689a      	ldr	r2, [r3, #8]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	4619      	mov	r1, r3
 800084a:	2303      	movs	r3, #3
 800084c:	408b      	lsls	r3, r1
 800084e:	43db      	mvns	r3, r3
 8000850:	4619      	mov	r1, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	400a      	ands	r2, r1
 8000858:	609a      	str	r2, [r3, #8]
		pGPIOxHandle->pGPIOx->OSPEEDR |= temp;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6899      	ldr	r1, [r3, #8]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	430a      	orrs	r2, r1
 8000868:	609a      	str	r2, [r3, #8]

		// 4. Pull Up Pull Down Configure
		temp = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7a1b      	ldrb	r3, [r3, #8]
 8000872:	461a      	mov	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	617b      	str	r3, [r7, #20]
		pGPIOxHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber); //clear pins before writing new values
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	68da      	ldr	r2, [r3, #12]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	4619      	mov	r1, r3
 800088c:	2303      	movs	r3, #3
 800088e:	408b      	lsls	r3, r1
 8000890:	43db      	mvns	r3, r3
 8000892:	4619      	mov	r1, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	400a      	ands	r2, r1
 800089a:	60da      	str	r2, [r3, #12]
		pGPIOxHandle->pGPIOx->PUPDR |= temp;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68d9      	ldr	r1, [r3, #12]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	430a      	orrs	r2, r1
 80008aa:	60da      	str	r2, [r3, #12]
	}


	// 5.  Alternate Functionality Configure
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUNC){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	795b      	ldrb	r3, [r3, #5]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d131      	bne.n	8000918 <GPIO_Init+0x33c>
		uint8_t temp1, temp2;
		temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	791b      	ldrb	r3, [r3, #4]
 80008c0:	f003 0307 	and.w	r3, r3, #7
 80008c4:	73fb      	strb	r3, [r7, #15]

		pGPIOxHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clear pins before writing new values
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	7c3a      	ldrb	r2, [r7, #16]
 80008cc:	3208      	adds	r2, #8
 80008ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	220f      	movs	r2, #15
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	7c3a      	ldrb	r2, [r7, #16]
 80008e6:	4001      	ands	r1, r0
 80008e8:	3208      	adds	r2, #8
 80008ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOxHandle->pGPIOx->AFR[temp1] |= (pGPIOxHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	7c3a      	ldrb	r2, [r7, #16]
 80008f4:	3208      	adds	r2, #8
 80008f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	7a5b      	ldrb	r3, [r3, #9]
 80008fe:	461a      	mov	r2, r3
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	4618      	mov	r0, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	7c3a      	ldrb	r2, [r7, #16]
 8000910:	4301      	orrs	r1, r0
 8000912:	3208      	adds	r2, #8
 8000914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40013800 	.word	0x40013800
 8000928:	40013c00 	.word	0x40013c00

0800092c <GPIO_ReadFromInputPin>:
 *
 * @return				-returns read value (0 or 1)
 *
 * @Note				-None
 */
uint8_t GPIO_ReadFromInputPin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber){
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

    // Check if PinNumber is valid (0 to 15 for a 16-bit IDR)
    if (PinNumber < 16) {
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	2b0f      	cmp	r3, #15
 800093c:	d809      	bhi.n	8000952 <GPIO_ReadFromInputPin+0x26>
        // Read the state of the specified pin and mask other bits
        value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x01);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	691a      	ldr	r2, [r3, #16]
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	fa22 f303 	lsr.w	r3, r2, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	e001      	b.n	8000956 <GPIO_ReadFromInputPin+0x2a>
    } else {
        // Handle an invalid PinNumber (you may choose to return an error code or take appropriate action)
        value = 0xFF;  // Using 0xFF as an indicator of an error, adjust as needed
 8000952:	23ff      	movs	r3, #255	; 0xff
 8000954:	73fb      	strb	r3, [r7, #15]
    }

    return value;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
	...

08000964 <SPI_PCLK_Control>:
 *
 * @return				-returns nothing(None)
 *
 * @Note				-SPI port to be enable or disable base address must be passed
 */
void SPI_PCLK_Control(SPIx_RegDef_t *pSPIx, uint8_t ED){
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
	if (ED == ENABLE){
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d120      	bne.n	80009b8 <SPI_PCLK_Control+0x54>
		if (pSPIx == SPI1){
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a22      	ldr	r2, [pc, #136]	; (8000a04 <SPI_PCLK_Control+0xa0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d106      	bne.n	800098c <SPI_PCLK_Control+0x28>
			SPI1_PCLK_ENABLE();
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 8000984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
		}else if (pSPIx == SPI3){
			SPI3_PCLK_DISABLE();
		}
	}

}
 800098a:	e035      	b.n	80009f8 <SPI_PCLK_Control+0x94>
		}else if (pSPIx == SPI2){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a1f      	ldr	r2, [pc, #124]	; (8000a0c <SPI_PCLK_Control+0xa8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d106      	bne.n	80009a2 <SPI_PCLK_Control+0x3e>
			SPI2_PCLK_ENABLE();
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 800099a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009a0:	e02a      	b.n	80009f8 <SPI_PCLK_Control+0x94>
		}else if (pSPIx == SPI3){
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <SPI_PCLK_Control+0xac>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d126      	bne.n	80009f8 <SPI_PCLK_Control+0x94>
			SPI3_PCLK_ENABLE();
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 80009b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009b6:	e01f      	b.n	80009f8 <SPI_PCLK_Control+0x94>
		if (pSPIx == SPI1){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <SPI_PCLK_Control+0xa0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d106      	bne.n	80009ce <SPI_PCLK_Control+0x6a>
			SPI1_PCLK_DISABLE();
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 80009c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c4:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 80009c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009ca:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009cc:	e014      	b.n	80009f8 <SPI_PCLK_Control+0x94>
		}else if (pSPIx == SPI2){
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <SPI_PCLK_Control+0xa8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d106      	bne.n	80009e4 <SPI_PCLK_Control+0x80>
			SPI2_PCLK_DISABLE();
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 80009dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009e2:	e009      	b.n	80009f8 <SPI_PCLK_Control+0x94>
		}else if (pSPIx == SPI3){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <SPI_PCLK_Control+0xac>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d105      	bne.n	80009f8 <SPI_PCLK_Control+0x94>
			SPI3_PCLK_DISABLE();
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SPI_PCLK_Control+0xa4>)
 80009f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40013000 	.word	0x40013000
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40003800 	.word	0x40003800
 8000a10:	40003c00 	.word	0x40003c00

08000a14 <SPI_ProtocolEnable>:

// Enables the SPI Peripheral Protocol
void SPI_ProtocolEnable(SPIx_RegDef_t *pSPIx, uint8_t ED){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
	if (ED == ENABLE){
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d106      	bne.n	8000a34 <SPI_ProtocolEnable+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a32:	e005      	b.n	8000a40 <SPI_ProtocolEnable+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <SSOE_Config>:
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

// Config SSOE
void SSOE_Config(SPIx_RegDef_t *pSPIx, uint8_t ED){
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
	if (ED == ENABLE){
 8000a56:	78fb      	ldrb	r3, [r7, #3]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d106      	bne.n	8000a6a <SSOE_Config+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f043 0204 	orr.w	r2, r3, #4
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	605a      	str	r2, [r3, #4]
	}else{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000a68:	e005      	b.n	8000a76 <SSOE_Config+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f023 0204 	bic.w	r2, r3, #4
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	605a      	str	r2, [r3, #4]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <SPI_Init>:
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void SPI_Init(SPI_Handle_t *pSPIxHandle){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]

	// Enable Clock before use
	SPI_PCLK_Control(pSPIxHandle->pSPIx, ENABLE);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2101      	movs	r1, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff66 	bl	8000964 <SPI_PCLK_Control>

	// 1. Device mode
	temp |= (pSPIxHandle->SPI_PinConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]

	// 2. Bus configuration
	if(pSPIxHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_FULL_DUPLEX){
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	795b      	ldrb	r3, [r3, #5]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d104      	bne.n	8000ab8 <SPI_Init+0x38>
		// Clear BIDIMODE
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	e014      	b.n	8000ae2 <SPI_Init+0x62>
	}else if(pSPIxHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_HALP_DUPLEX){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d104      	bne.n	8000aca <SPI_Init+0x4a>
		// Set BIDIMODE
		temp |= (1 << SPI_CR1_BIDIMODE);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e00b      	b.n	8000ae2 <SPI_Init+0x62>
	}else if(pSPIxHandle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX){
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	795b      	ldrb	r3, [r3, #5]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d107      	bne.n	8000ae2 <SPI_Init+0x62>
		// Clear BIDIMODE
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ad8:	60fb      	str	r3, [r7, #12]
		// SetReceive-only mode)
		temp |= (1 << SPI_CR1_RXONLY );
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae0:	60fb      	str	r3, [r7, #12]
	}

	// 3. SPI serial clock speed
	temp |= (pSPIxHandle->SPI_PinConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	799b      	ldrb	r3, [r3, #6]
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]

	// 4. Data frame format
	temp |= (pSPIxHandle->SPI_PinConfig.SPI_DFF << SPI_CR1_DFF);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	79db      	ldrb	r3, [r3, #7]
 8000af4:	02db      	lsls	r3, r3, #11
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]

	// 5. Clock polarity
	temp |= (pSPIxHandle->SPI_PinConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7a1b      	ldrb	r3, [r3, #8]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	461a      	mov	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]

	// 6. Clock polarity
	temp |= (pSPIxHandle->SPI_PinConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7a5b      	ldrb	r3, [r3, #9]
 8000b10:	461a      	mov	r2, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]

	// 7. Clock polarity
	if (pSPIxHandle->SPI_PinConfig.SPI_SSM == SPI_SSM_SW){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7a9b      	ldrb	r3, [r3, #10]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d104      	bne.n	8000b2a <SPI_Init+0xaa>
		// Software slave management enabled
		temp |= (1 << SPI_CR1_SSM);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	e007      	b.n	8000b3a <SPI_Init+0xba>
	}else if(pSPIxHandle->SPI_PinConfig.SPI_SSM == SPI_SSM_HW){
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7a9b      	ldrb	r3, [r3, #10]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d103      	bne.n	8000b3a <SPI_Init+0xba>
		// Software slave management disabled
		temp &= ~(1 << SPI_CR1_SSM);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b38:	60fb      	str	r3, [r7, #12]
	}

	// Assigned all configured bit fields to control register 1
	pSPIxHandle->pSPIx->CR1 = temp;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	601a      	str	r2, [r3, #0]


}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <Check_FlagStatus>:
	}else if (pSPIx == SPI3){
		SPI3_RESET();
	}
}

uint8_t Check_FlagStatus(SPIx_RegDef_t *pSPIx, uint32_t FlagName){
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <Check_FlagStatus+0x1a>
		return FLAG_SET;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <Check_FlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <SPI_DataSend>:
 *
 * @return				-returns nothing(None)
 *
 * @Note				-This is a blocking / Polling call function
 */
void SPI_DataSend(SPIx_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t DataLen){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
	while (DataLen > 0){
 8000b7c:	e027      	b.n	8000bce <SPI_DataSend+0x5e>
		// 1. Wait for TXE to be empty
		while (Check_FlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000b7e:	bf00      	nop
 8000b80:	2102      	movs	r1, #2
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff ffe1 	bl	8000b4a <Check_FlagStatus>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f8      	beq.n	8000b80 <SPI_DataSend+0x10>

		// 2. Check DFF size
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00e      	beq.n	8000bb8 <SPI_DataSend+0x48>
			// 16 Bits DFF
			//Load Data from Tx buffer into DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	60da      	str	r2, [r3, #12]
			DataLen --;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
			DataLen --;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	e00a      	b.n	8000bce <SPI_DataSend+0x5e>
		}else{
			// 8 Bits DFF size
			pSPIx->DR = *pTxBuffer;
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	60da      	str	r2, [r3, #12]
			DataLen --;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
	while (DataLen > 0){
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1d4      	bne.n	8000b7e <SPI_DataSend+0xe>
		}

	}
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <SPI_DataReceive>:
 *
 * @return				-returns nothing(None)
 *
 * @Note				-This is a blocking / Polling call function
 */
void SPI_DataReceive(SPIx_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t DataLen){
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b084      	sub	sp, #16
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
	while (DataLen > 0){
 8000bea:	e027      	b.n	8000c3c <SPI_DataReceive+0x5e>
		// 1. Wait for RXNE to be set
		while (Check_FlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000bec:	bf00      	nop
 8000bee:	2101      	movs	r1, #1
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f7ff ffaa 	bl	8000b4a <Check_FlagStatus>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f8      	beq.n	8000bee <SPI_DataReceive+0x10>

		// 2. Check DFF size
		if (pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00e      	beq.n	8000c26 <SPI_DataReceive+0x48>
			// 16 Bits DFF
			// Read Data from DR to RX buffer
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	801a      	strh	r2, [r3, #0]
			DataLen --;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
			DataLen --;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	e00a      	b.n	8000c3c <SPI_DataReceive+0x5e>
		}else{
			// 8 Bits DFF size
			*pRxBuffer = pSPIx->DR;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	701a      	strb	r2, [r3, #0]
			DataLen --;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
	while (DataLen > 0){
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1d4      	bne.n	8000bec <SPI_DataReceive+0xe>
		}

	}
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <__libc_init_array>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	4d0d      	ldr	r5, [pc, #52]	; (8000c84 <__libc_init_array+0x38>)
 8000c50:	4c0d      	ldr	r4, [pc, #52]	; (8000c88 <__libc_init_array+0x3c>)
 8000c52:	1b64      	subs	r4, r4, r5
 8000c54:	10a4      	asrs	r4, r4, #2
 8000c56:	2600      	movs	r6, #0
 8000c58:	42a6      	cmp	r6, r4
 8000c5a:	d109      	bne.n	8000c70 <__libc_init_array+0x24>
 8000c5c:	4d0b      	ldr	r5, [pc, #44]	; (8000c8c <__libc_init_array+0x40>)
 8000c5e:	4c0c      	ldr	r4, [pc, #48]	; (8000c90 <__libc_init_array+0x44>)
 8000c60:	f000 f818 	bl	8000c94 <_init>
 8000c64:	1b64      	subs	r4, r4, r5
 8000c66:	10a4      	asrs	r4, r4, #2
 8000c68:	2600      	movs	r6, #0
 8000c6a:	42a6      	cmp	r6, r4
 8000c6c:	d105      	bne.n	8000c7a <__libc_init_array+0x2e>
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c74:	4798      	blx	r3
 8000c76:	3601      	adds	r6, #1
 8000c78:	e7ee      	b.n	8000c58 <__libc_init_array+0xc>
 8000c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c7e:	4798      	blx	r3
 8000c80:	3601      	adds	r6, #1
 8000c82:	e7f2      	b.n	8000c6a <__libc_init_array+0x1e>
 8000c84:	08000cac 	.word	0x08000cac
 8000c88:	08000cac 	.word	0x08000cac
 8000c8c:	08000cac 	.word	0x08000cac
 8000c90:	08000cb0 	.word	0x08000cb0

08000c94 <_init>:
 8000c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c96:	bf00      	nop
 8000c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9a:	bc08      	pop	{r3}
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	4770      	bx	lr

08000ca0 <_fini>:
 8000ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca2:	bf00      	nop
 8000ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca6:	bc08      	pop	{r3}
 8000ca8:	469e      	mov	lr, r3
 8000caa:	4770      	bx	lr
