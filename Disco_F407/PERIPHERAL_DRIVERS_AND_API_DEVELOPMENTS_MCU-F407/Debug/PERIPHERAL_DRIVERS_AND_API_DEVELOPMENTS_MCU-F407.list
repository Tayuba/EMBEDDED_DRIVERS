
PERIPHERAL_DRIVERS_AND_API_DEVELOPMENTS_MCU-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008c0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a68  08000a70  00010a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a68  08000a68  00010a70  2**0
                  CONTENTS
  4 .ARM          00000000  08000a68  08000a68  00010a70  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a68  08000a70  00010a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a68  08000a68  00010a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a6c  08000a6c  00010a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a70  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010a70  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010a9a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a44  00000000  00000000  00010add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002ee  00000000  00000000  00011521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c8  00000000  00000000  00011810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000008c  00000000  00000000  000118d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000982  00000000  00000000  00011964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001103  00000000  00000000  000122e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000968e  00000000  00000000  000133e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000288  00000000  00000000  0001ca78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0001cd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a50 	.word	0x08000a50

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a50 	.word	0x08000a50

080001e8 <main>:
#include <string.h>

void delay(void);
void EXTI0_IRQHandler(void);

int main(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t LED_D12, BTN_A0;

	memset(&LED_D12, 0, sizeof(LED_D12));
 80001ee:	f107 030c 	add.w	r3, r7, #12
 80001f2:	220c      	movs	r2, #12
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fbfe 	bl	80009f8 <memset>
	memset(&BTN_A0, 0, sizeof(BTN_A0));
 80001fc:	463b      	mov	r3, r7
 80001fe:	220c      	movs	r2, #12
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fbf8 	bl	80009f8 <memset>

	//LED Configuration
	LED_D12.pGPIOx = GPIOD;
 8000208:	4b17      	ldr	r3, [pc, #92]	; (8000268 <main+0x80>)
 800020a:	60fb      	str	r3, [r7, #12]
	LED_D12.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800020c:	230c      	movs	r3, #12
 800020e:	743b      	strb	r3, [r7, #16]
	LED_D12.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000210:	2301      	movs	r3, #1
 8000212:	747b      	strb	r3, [r7, #17]
	LED_D12.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_MEDIUM;
 8000214:	2301      	movs	r3, #1
 8000216:	74fb      	strb	r3, [r7, #19]
	LED_D12.GPIO_PinConfig.GPIO_PinOType= GPIO_OTYPE_PP;
 8000218:	2300      	movs	r3, #0
 800021a:	74bb      	strb	r3, [r7, #18]
	LED_D12.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_NO_PUPD;
 800021c:	2300      	movs	r3, #0
 800021e:	753b      	strb	r3, [r7, #20]


	// CALLING My API
	GPIO_PCLK_Control(GPIOD, ENABLE);		// Enable the clock
 8000220:	2101      	movs	r1, #1
 8000222:	4811      	ldr	r0, [pc, #68]	; (8000268 <main+0x80>)
 8000224:	f000 f874 	bl	8000310 <GPIO_PCLK_Control>
	GPIO_Init(&LED_D12);					// Initialize the GPIOD
 8000228:	f107 030c 	add.w	r3, r7, #12
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f957 	bl	80004e0 <GPIO_Init>

	//Button Configuration

	BTN_A0.pGPIOx = GPIOA;
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <main+0x84>)
 8000234:	603b      	str	r3, [r7, #0]
	BTN_A0.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000236:	2300      	movs	r3, #0
 8000238:	713b      	strb	r3, [r7, #4]
	BTN_A0.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FE_T;
 800023a:	2304      	movs	r3, #4
 800023c:	717b      	strb	r3, [r7, #5]
	BTN_A0.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_VHIGH;
 800023e:	2303      	movs	r3, #3
 8000240:	71fb      	strb	r3, [r7, #7]
	BTN_A0.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_NO_PUPD;
 8000242:	2300      	movs	r3, #0
 8000244:	723b      	strb	r3, [r7, #8]


	// CALLING My API
	GPIO_PCLK_Control(GPIOA, ENABLE);		// Enable the clock
 8000246:	2101      	movs	r1, #1
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <main+0x84>)
 800024a:	f000 f861 	bl	8000310 <GPIO_PCLK_Control>
	GPIO_Init(&BTN_A0);						// Initialize the GPIOA
 800024e:	463b      	mov	r3, r7
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f945 	bl	80004e0 <GPIO_Init>

	//IRQ Configuration
	GPIO_IRQPriorityConfig(NVIC_PR_NO_15, IRQ_NO_EXTI0);
 8000256:	2106      	movs	r1, #6
 8000258:	200f      	movs	r0, #15
 800025a:	f000 fb79 	bl	8000950 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 800025e:	2101      	movs	r1, #1
 8000260:	2006      	movs	r0, #6
 8000262:	f000 faf1 	bl	8000848 <GPIO_IRQInterruptConfig>

    /* Loop forever */
	while(1);
 8000266:	e7fe      	b.n	8000266 <main+0x7e>
 8000268:	40020c00 	.word	0x40020c00
 800026c:	40020000 	.word	0x40020000

08000270 <delay>:
}

void delay(void){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i <500000/2; i++){
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e002      	b.n	8000282 <delay+0x12>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a04      	ldr	r2, [pc, #16]	; (8000298 <delay+0x28>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d9f8      	bls.n	800027c <delay+0xc>

	}
}
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	0003d08f 	.word	0x0003d08f

0800029c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	delay();
 80002a0:	f7ff ffe6 	bl	8000270 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fb87 	bl	80009b8 <GPIO_IRQHandling>
	GPIO_TogglePin(GPIOD, GPIO_PIN_NO_12);
 80002aa:	210c      	movs	r1, #12
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <EXTI0_IRQHandler+0x1c>)
 80002ae:	f000 fab7 	bl	8000820 <GPIO_TogglePin>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40020c00 	.word	0x40020c00

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	; (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	; (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 fb8d 	bl	8000a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f7ff ff7b 	bl	80001e8 <main>

080002f2 <LoopForever>:

LoopForever:
  b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000300:	08000a70 	.word	0x08000a70
  ldr r2, =_sbss
 8000304:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000308:	2000001c 	.word	0x2000001c

0800030c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC_IRQHandler>
	...

08000310 <GPIO_PCLK_Control>:
 * @return				-returns nothing(None)
 *
 * @Note				-GPIO port to be enable or disable base address must be passed
 */

void GPIO_PCLK_Control(GPIOx_RegDef_t *pGPIOx, uint8_t ED){
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
	if (ED == ENABLE){
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d162      	bne.n	80003e8 <GPIO_PCLK_Control+0xd8>
		if (pGPIOx == GPIOA){
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a64      	ldr	r2, [pc, #400]	; (80004b8 <GPIO_PCLK_Control+0x1a8>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PCLK_Control+0x28>
			GPIOA_PCLK_ENABLE();
 800032a:	4b64      	ldr	r3, [pc, #400]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a63      	ldr	r2, [pc, #396]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOI){
			GPIOI_PCLK_DISABLE();
		}
	}

}
 8000336:	e0b9      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOB){
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a61      	ldr	r2, [pc, #388]	; (80004c0 <GPIO_PCLK_Control+0x1b0>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PCLK_Control+0x3e>
			GPIOB_PCLK_ENABLE();
 8000340:	4b5e      	ldr	r3, [pc, #376]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a5d      	ldr	r2, [pc, #372]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000346:	f043 0302 	orr.w	r3, r3, #2
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	e0ae      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOC){
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a5c      	ldr	r2, [pc, #368]	; (80004c4 <GPIO_PCLK_Control+0x1b4>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PCLK_Control+0x54>
			GPIOC_PCLK_ENABLE();
 8000356:	4b59      	ldr	r3, [pc, #356]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	4a58      	ldr	r2, [pc, #352]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000362:	e0a3      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOD){
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a58      	ldr	r2, [pc, #352]	; (80004c8 <GPIO_PCLK_Control+0x1b8>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_PCLK_Control+0x6a>
			GPIOD_PCLK_ENABLE();
 800036c:	4b53      	ldr	r3, [pc, #332]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a52      	ldr	r2, [pc, #328]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000378:	e098      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOE){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a53      	ldr	r2, [pc, #332]	; (80004cc <GPIO_PCLK_Control+0x1bc>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PCLK_Control+0x80>
			GPIOE_PCLK_ENABLE();
 8000382:	4b4e      	ldr	r3, [pc, #312]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a4d      	ldr	r2, [pc, #308]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000388:	f043 0310 	orr.w	r3, r3, #16
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038e:	e08d      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOF){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a4f      	ldr	r2, [pc, #316]	; (80004d0 <GPIO_PCLK_Control+0x1c0>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PCLK_Control+0x96>
			GPIOF_PCLK_ENABLE();
 8000398:	4b48      	ldr	r3, [pc, #288]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a47      	ldr	r2, [pc, #284]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e082      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOG){
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a4a      	ldr	r2, [pc, #296]	; (80004d4 <GPIO_PCLK_Control+0x1c4>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PCLK_Control+0xac>
			GPIOG_PCLK_ENABLE();
 80003ae:	4b43      	ldr	r3, [pc, #268]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a42      	ldr	r2, [pc, #264]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 80003b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e077      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOH){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a46      	ldr	r2, [pc, #280]	; (80004d8 <GPIO_PCLK_Control+0x1c8>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PCLK_Control+0xc2>
			GPIOH_PCLK_ENABLE();
 80003c4:	4b3d      	ldr	r3, [pc, #244]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a3c      	ldr	r2, [pc, #240]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 80003ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e06c      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOI){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a41      	ldr	r2, [pc, #260]	; (80004dc <GPIO_PCLK_Control+0x1cc>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d168      	bne.n	80004ac <GPIO_PCLK_Control+0x19c>
			GPIOI_PCLK_ENABLE();
 80003da:	4b38      	ldr	r3, [pc, #224]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a37      	ldr	r2, [pc, #220]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 80003e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e061      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		if (pGPIOx == GPIOA){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a33      	ldr	r2, [pc, #204]	; (80004b8 <GPIO_PCLK_Control+0x1a8>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PCLK_Control+0xee>
			GPIOA_PCLK_DISABLE();
 80003f0:	4b32      	ldr	r3, [pc, #200]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a31      	ldr	r2, [pc, #196]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e056      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOB){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a2f      	ldr	r2, [pc, #188]	; (80004c0 <GPIO_PCLK_Control+0x1b0>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PCLK_Control+0x104>
			GPIOB_PCLK_DISABLE();
 8000406:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a2c      	ldr	r2, [pc, #176]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 800040c:	f023 0302 	bic.w	r3, r3, #2
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e04b      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOC){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a2b      	ldr	r2, [pc, #172]	; (80004c4 <GPIO_PCLK_Control+0x1b4>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PCLK_Control+0x11a>
			GPIOC_PCLK_DISABLE();
 800041c:	4b27      	ldr	r3, [pc, #156]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a26      	ldr	r2, [pc, #152]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000422:	f023 0304 	bic.w	r3, r3, #4
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e040      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOD){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a26      	ldr	r2, [pc, #152]	; (80004c8 <GPIO_PCLK_Control+0x1b8>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PCLK_Control+0x130>
			GPIOD_PCLK_DISABLE();
 8000432:	4b22      	ldr	r3, [pc, #136]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a21      	ldr	r2, [pc, #132]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000438:	f023 0308 	bic.w	r3, r3, #8
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e035      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOE){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a22      	ldr	r2, [pc, #136]	; (80004cc <GPIO_PCLK_Control+0x1bc>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PCLK_Control+0x146>
			GPIOE_PCLK_DISABLE();
 8000448:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 800044e:	f023 0310 	bic.w	r3, r3, #16
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e02a      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOF){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <GPIO_PCLK_Control+0x1c0>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PCLK_Control+0x15c>
			GPIOF_PCLK_DISABLE();
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a16      	ldr	r2, [pc, #88]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000464:	f023 0320 	bic.w	r3, r3, #32
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e01f      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOG){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a19      	ldr	r2, [pc, #100]	; (80004d4 <GPIO_PCLK_Control+0x1c4>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PCLK_Control+0x172>
			GPIOG_PCLK_DISABLE();
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 800047a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e014      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOH){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <GPIO_PCLK_Control+0x1c8>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PCLK_Control+0x188>
			GPIOH_PCLK_DISABLE();
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 8000490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	e009      	b.n	80004ac <GPIO_PCLK_Control+0x19c>
		}else if (pGPIOx == GPIOI){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a10      	ldr	r2, [pc, #64]	; (80004dc <GPIO_PCLK_Control+0x1cc>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d105      	bne.n	80004ac <GPIO_PCLK_Control+0x19c>
			GPIOI_PCLK_DISABLE();
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4a05      	ldr	r2, [pc, #20]	; (80004bc <GPIO_PCLK_Control+0x1ac>)
 80004a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40020000 	.word	0x40020000
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40020400 	.word	0x40020400
 80004c4:	40020800 	.word	0x40020800
 80004c8:	40020c00 	.word	0x40020c00
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40021400 	.word	0x40021400
 80004d4:	40021800 	.word	0x40021800
 80004d8:	40021c00 	.word	0x40021c00
 80004dc:	40022000 	.word	0x40022000

080004e0 <GPIO_Init>:
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOxHandle){
 80004e0:	b480      	push	{r7}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;  //Temporal register
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
	// 1. Pin mode Configure for non Interrupt
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d81f      	bhi.n	8000534 <GPIO_Init+0x54>
		temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	461a      	mov	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	791b      	ldrb	r3, [r3, #4]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	617b      	str	r3, [r7, #20]
		pGPIOxHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	4619      	mov	r1, r3
 8000512:	2303      	movs	r3, #3
 8000514:	408b      	lsls	r3, r1
 8000516:	43db      	mvns	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	400a      	ands	r2, r1
 8000520:	601a      	str	r2, [r3, #0]
		pGPIOxHandle->pGPIOx->MODER |= temp;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6819      	ldr	r1, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e0d1      	b.n	80006d8 <GPIO_Init+0x1f8>

	}else{
		//Pin mode Configure for  Interrupt
	//1. Configure the edge detection registers
		//1a. Configure falling edge trigger register
		if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FE_T){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	2b04      	cmp	r3, #4
 800053a:	d117      	bne.n	800056c <GPIO_Init+0x8c>
			EXTI->RTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 800053c:	4b4a      	ldr	r3, [pc, #296]	; (8000668 <GPIO_Init+0x188>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	7912      	ldrb	r2, [r2, #4]
 8000544:	4611      	mov	r1, r2
 8000546:	2201      	movs	r2, #1
 8000548:	408a      	lsls	r2, r1
 800054a:	43d2      	mvns	r2, r2
 800054c:	4611      	mov	r1, r2
 800054e:	4a46      	ldr	r2, [pc, #280]	; (8000668 <GPIO_Init+0x188>)
 8000550:	400b      	ands	r3, r1
 8000552:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000554:	4b44      	ldr	r3, [pc, #272]	; (8000668 <GPIO_Init+0x188>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	4611      	mov	r1, r2
 8000564:	4a40      	ldr	r2, [pc, #256]	; (8000668 <GPIO_Init+0x188>)
 8000566:	430b      	orrs	r3, r1
 8000568:	60d3      	str	r3, [r2, #12]
 800056a:	e035      	b.n	80005d8 <GPIO_Init+0xf8>
		}	//1a. Configure rising edge trigger register
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RE_T){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b05      	cmp	r3, #5
 8000572:	d117      	bne.n	80005a4 <GPIO_Init+0xc4>
			EXTI->FTSR &= ~(1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000574:	4b3c      	ldr	r3, [pc, #240]	; (8000668 <GPIO_Init+0x188>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7912      	ldrb	r2, [r2, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	43d2      	mvns	r2, r2
 8000584:	4611      	mov	r1, r2
 8000586:	4a38      	ldr	r2, [pc, #224]	; (8000668 <GPIO_Init+0x188>)
 8000588:	400b      	ands	r3, r1
 800058a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058c:	4b36      	ldr	r3, [pc, #216]	; (8000668 <GPIO_Init+0x188>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7912      	ldrb	r2, [r2, #4]
 8000594:	4611      	mov	r1, r2
 8000596:	2201      	movs	r2, #1
 8000598:	408a      	lsls	r2, r1
 800059a:	4611      	mov	r1, r2
 800059c:	4a32      	ldr	r2, [pc, #200]	; (8000668 <GPIO_Init+0x188>)
 800059e:	430b      	orrs	r3, r1
 80005a0:	6093      	str	r3, [r2, #8]
 80005a2:	e019      	b.n	80005d8 <GPIO_Init+0xf8>
		}	//1a. Configure both falling and rising edge trigger register
		else if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FERE_T){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b06      	cmp	r3, #6
 80005aa:	d115      	bne.n	80005d8 <GPIO_Init+0xf8>
			EXTI->FTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ac:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <GPIO_Init+0x188>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7912      	ldrb	r2, [r2, #4]
 80005b4:	4611      	mov	r1, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	408a      	lsls	r2, r1
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a2a      	ldr	r2, [pc, #168]	; (8000668 <GPIO_Init+0x188>)
 80005be:	430b      	orrs	r3, r1
 80005c0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c2:	4b29      	ldr	r3, [pc, #164]	; (8000668 <GPIO_Init+0x188>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	7912      	ldrb	r2, [r2, #4]
 80005ca:	4611      	mov	r1, r2
 80005cc:	2201      	movs	r2, #1
 80005ce:	408a      	lsls	r2, r1
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a25      	ldr	r2, [pc, #148]	; (8000668 <GPIO_Init+0x188>)
 80005d4:	430b      	orrs	r3, r1
 80005d6:	6093      	str	r3, [r2, #8]
		}
	//2. Configure the GPIO port selection in External Interrupt Configuration Register (SYSCFG_EXTICR)
		uint8_t  temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	74fb      	strb	r3, [r7, #19]
		uint8_t  temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	f003 0303 	and.w	r3, r3, #3
 80005e8:	74bb      	strb	r3, [r7, #18]
		uint8_t  portcode = GPIO_BASEADDR_TO_PCODE(pGPIOxHandle->pGPIOx);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a1f      	ldr	r2, [pc, #124]	; (800066c <GPIO_Init+0x18c>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d04d      	beq.n	8000690 <GPIO_Init+0x1b0>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1d      	ldr	r2, [pc, #116]	; (8000670 <GPIO_Init+0x190>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d032      	beq.n	8000664 <GPIO_Init+0x184>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <GPIO_Init+0x194>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d02b      	beq.n	8000660 <GPIO_Init+0x180>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1a      	ldr	r2, [pc, #104]	; (8000678 <GPIO_Init+0x198>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d024      	beq.n	800065c <GPIO_Init+0x17c>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a19      	ldr	r2, [pc, #100]	; (800067c <GPIO_Init+0x19c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d01d      	beq.n	8000658 <GPIO_Init+0x178>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a17      	ldr	r2, [pc, #92]	; (8000680 <GPIO_Init+0x1a0>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d016      	beq.n	8000654 <GPIO_Init+0x174>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a16      	ldr	r2, [pc, #88]	; (8000684 <GPIO_Init+0x1a4>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d00f      	beq.n	8000650 <GPIO_Init+0x170>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <GPIO_Init+0x1a8>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d008      	beq.n	800064c <GPIO_Init+0x16c>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <GPIO_Init+0x1ac>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d101      	bne.n	8000648 <GPIO_Init+0x168>
 8000644:	2308      	movs	r3, #8
 8000646:	e024      	b.n	8000692 <GPIO_Init+0x1b2>
 8000648:	2300      	movs	r3, #0
 800064a:	e022      	b.n	8000692 <GPIO_Init+0x1b2>
 800064c:	2307      	movs	r3, #7
 800064e:	e020      	b.n	8000692 <GPIO_Init+0x1b2>
 8000650:	2306      	movs	r3, #6
 8000652:	e01e      	b.n	8000692 <GPIO_Init+0x1b2>
 8000654:	2305      	movs	r3, #5
 8000656:	e01c      	b.n	8000692 <GPIO_Init+0x1b2>
 8000658:	2304      	movs	r3, #4
 800065a:	e01a      	b.n	8000692 <GPIO_Init+0x1b2>
 800065c:	2303      	movs	r3, #3
 800065e:	e018      	b.n	8000692 <GPIO_Init+0x1b2>
 8000660:	2302      	movs	r3, #2
 8000662:	e016      	b.n	8000692 <GPIO_Init+0x1b2>
 8000664:	2301      	movs	r3, #1
 8000666:	e014      	b.n	8000692 <GPIO_Init+0x1b2>
 8000668:	40013c00 	.word	0x40013c00
 800066c:	40020000 	.word	0x40020000
 8000670:	40020400 	.word	0x40020400
 8000674:	40020800 	.word	0x40020800
 8000678:	40020c00 	.word	0x40020c00
 800067c:	40021000 	.word	0x40021000
 8000680:	40021400 	.word	0x40021400
 8000684:	40021800 	.word	0x40021800
 8000688:	40021c00 	.word	0x40021c00
 800068c:	40022000 	.word	0x40022000
 8000690:	2300      	movs	r3, #0
 8000692:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_ENABLE();
 8000694:	4b5f      	ldr	r3, [pc, #380]	; (8000814 <GPIO_Init+0x334>)
 8000696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000698:	4a5e      	ldr	r2, [pc, #376]	; (8000814 <GPIO_Init+0x334>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 80006a0:	4a5d      	ldr	r2, [pc, #372]	; (8000818 <GPIO_Init+0x338>)
 80006a2:	7cfb      	ldrb	r3, [r7, #19]
 80006a4:	3302      	adds	r3, #2
 80006a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006aa:	7c79      	ldrb	r1, [r7, #17]
 80006ac:	7cbb      	ldrb	r3, [r7, #18]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	fa01 f303 	lsl.w	r3, r1, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	4958      	ldr	r1, [pc, #352]	; (8000818 <GPIO_Init+0x338>)
 80006b8:	7cfb      	ldrb	r3, [r7, #19]
 80006ba:	4302      	orrs	r2, r0
 80006bc:	3302      	adds	r3, #2
 80006be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3. Enable the EXTI interrupt delivery using Interrupt Mask Address (IMR)
		EXTI->IMR |= (1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c2:	4b56      	ldr	r3, [pc, #344]	; (800081c <GPIO_Init+0x33c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	7912      	ldrb	r2, [r2, #4]
 80006ca:	4611      	mov	r1, r2
 80006cc:	2201      	movs	r2, #1
 80006ce:	408a      	lsls	r2, r1
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a52      	ldr	r2, [pc, #328]	; (800081c <GPIO_Init+0x33c>)
 80006d4:	430b      	orrs	r3, r1
 80006d6:	6013      	str	r3, [r2, #0]
	}

	// 2. Output type Configure
	temp = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinOType << (pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	799b      	ldrb	r3, [r3, #6]
 80006e0:	461a      	mov	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	4619      	mov	r1, r3
 80006f8:	2301      	movs	r3, #1
 80006fa:	408b      	lsls	r3, r1
 80006fc:	43db      	mvns	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	400a      	ands	r2, r1
 8000706:	605a      	str	r2, [r3, #4]
	pGPIOxHandle->pGPIOx->OTYPER |= temp;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6859      	ldr	r1, [r3, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	430a      	orrs	r2, r1
 8000716:	605a      	str	r2, [r3, #4]

	// 3. Speed Configure
	temp = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	79db      	ldrb	r3, [r3, #7]
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	4619      	mov	r1, r3
 800073a:	2303      	movs	r3, #3
 800073c:	408b      	lsls	r3, r1
 800073e:	43db      	mvns	r3, r3
 8000740:	4619      	mov	r1, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	400a      	ands	r2, r1
 8000748:	609a      	str	r2, [r3, #8]
	pGPIOxHandle->pGPIOx->OSPEEDR |= temp;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6899      	ldr	r1, [r3, #8]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	430a      	orrs	r2, r1
 8000758:	609a      	str	r2, [r3, #8]

	// 4. Pull Up Pull Down Configure
	temp = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOxHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber));
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	7a1b      	ldrb	r3, [r3, #8]
 8000762:	461a      	mov	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	791b      	ldrb	r3, [r3, #4]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	617b      	str	r3, [r7, #20]
	pGPIOxHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	68da      	ldr	r2, [r3, #12]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	4619      	mov	r1, r3
 800077c:	2303      	movs	r3, #3
 800077e:	408b      	lsls	r3, r1
 8000780:	43db      	mvns	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	400a      	ands	r2, r1
 800078a:	60da      	str	r2, [r3, #12]
	pGPIOxHandle->pGPIOx->PUPDR |= temp;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	68d9      	ldr	r1, [r3, #12]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	697a      	ldr	r2, [r7, #20]
 8000798:	430a      	orrs	r2, r1
 800079a:	60da      	str	r2, [r3, #12]

	// 5.  Alternate Functionality Configure
	if (pGPIOxHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFUNC){
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d831      	bhi.n	8000808 <GPIO_Init+0x328>
		uint8_t temp1, temp2;
		temp1 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	08db      	lsrs	r3, r3, #3
 80007aa:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOxHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	f003 0307 	and.w	r3, r3, #7
 80007b4:	73fb      	strb	r3, [r7, #15]

		pGPIOxHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	7c3a      	ldrb	r2, [r7, #16]
 80007bc:	3208      	adds	r2, #8
 80007be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	220f      	movs	r2, #15
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	43db      	mvns	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	7c3a      	ldrb	r2, [r7, #16]
 80007d6:	4001      	ands	r1, r0
 80007d8:	3208      	adds	r2, #8
 80007da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOxHandle->pGPIOx->AFR[temp1] |= (pGPIOxHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	7c3a      	ldrb	r2, [r7, #16]
 80007e4:	3208      	adds	r2, #8
 80007e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7a5b      	ldrb	r3, [r3, #9]
 80007ee:	461a      	mov	r2, r3
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	7c3a      	ldrb	r2, [r7, #16]
 8000800:	4301      	orrs	r1, r0
 8000802:	3208      	adds	r2, #8
 8000804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000808:	bf00      	nop
 800080a:	371c      	adds	r7, #28
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40013800 	.word	0x40013800
 800081c:	40013c00 	.word	0x40013c00

08000820 <GPIO_TogglePin>:
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_TogglePin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	78fa      	ldrb	r2, [r7, #3]
 8000832:	2101      	movs	r1, #1
 8000834:	fa01 f202 	lsl.w	r2, r1, r2
 8000838:	405a      	eors	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	615a      	str	r2, [r3, #20]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <GPIO_IRQInterruptConfig>:
 * @return				-returns nothing(None)
 *
 * @Note				-I only programmed NVIC register up to 2 because
						 the total number of interrupts in F407 is less than 90
 */
void GPIO_IRQInterruptConfig(uint8_t IRQ_Number, uint8_t IRQ_ED){
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	460a      	mov	r2, r1
 8000852:	71fb      	strb	r3, [r7, #7]
 8000854:	4613      	mov	r3, r2
 8000856:	71bb      	strb	r3, [r7, #6]
	if (IRQ_ED == ENABLE){
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d133      	bne.n	80008c6 <GPIO_IRQInterruptConfig+0x7e>
		//Enable Interrupts
		if (IRQ_Number <= 31){
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b1f      	cmp	r3, #31
 8000862:	d80a      	bhi.n	800087a <GPIO_IRQInterruptConfig+0x32>
			//Enable ISER_0
			*NVIC_ISER0_ADDR |= (1 << IRQ_Number);
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <GPIO_IRQInterruptConfig+0xf0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	79fa      	ldrb	r2, [r7, #7]
 800086a:	2101      	movs	r1, #1
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	4611      	mov	r1, r2
 8000872:	4a31      	ldr	r2, [pc, #196]	; (8000938 <GPIO_IRQInterruptConfig+0xf0>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6013      	str	r3, [r2, #0]
			*NVIC_ICER2_ADDR |= (1 << IRQ_Number % 64);

		}
	}

}
 8000878:	e059      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQ_Number > 31 && IRQ_Number < 64){
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b1f      	cmp	r3, #31
 800087e:	d90f      	bls.n	80008a0 <GPIO_IRQInterruptConfig+0x58>
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b3f      	cmp	r3, #63	; 0x3f
 8000884:	d80c      	bhi.n	80008a0 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1_ADDR |= (1 << IRQ_Number % 32);
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <GPIO_IRQInterruptConfig+0xf4>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	79fa      	ldrb	r2, [r7, #7]
 800088c:	f002 021f 	and.w	r2, r2, #31
 8000890:	2101      	movs	r1, #1
 8000892:	fa01 f202 	lsl.w	r2, r1, r2
 8000896:	4611      	mov	r1, r2
 8000898:	4a28      	ldr	r2, [pc, #160]	; (800093c <GPIO_IRQInterruptConfig+0xf4>)
 800089a:	430b      	orrs	r3, r1
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e046      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQ_Number > 64 && IRQ_Number < 96){
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b40      	cmp	r3, #64	; 0x40
 80008a4:	d943      	bls.n	800092e <GPIO_IRQInterruptConfig+0xe6>
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b5f      	cmp	r3, #95	; 0x5f
 80008aa:	d840      	bhi.n	800092e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2_ADDR |= (1 << IRQ_Number % 64);
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <GPIO_IRQInterruptConfig+0xf8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008b6:	2101      	movs	r1, #1
 80008b8:	fa01 f202 	lsl.w	r2, r1, r2
 80008bc:	4611      	mov	r1, r2
 80008be:	4a20      	ldr	r2, [pc, #128]	; (8000940 <GPIO_IRQInterruptConfig+0xf8>)
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	e033      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		if (IRQ_Number <= 31){
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b1f      	cmp	r3, #31
 80008ca:	d80a      	bhi.n	80008e2 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0_ADDR |= (1 << IRQ_Number);
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <GPIO_IRQInterruptConfig+0xfc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f202 	lsl.w	r2, r1, r2
 80008d8:	4611      	mov	r1, r2
 80008da:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <GPIO_IRQInterruptConfig+0xfc>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	e025      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQ_Number > 31 && IRQ_Number < 64){
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b1f      	cmp	r3, #31
 80008e6:	d90f      	bls.n	8000908 <GPIO_IRQInterruptConfig+0xc0>
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b3f      	cmp	r3, #63	; 0x3f
 80008ec:	d80c      	bhi.n	8000908 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1_ADDR |= (1 << IRQ_Number % 32);
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <GPIO_IRQInterruptConfig+0x100>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	79fa      	ldrb	r2, [r7, #7]
 80008f4:	f002 021f 	and.w	r2, r2, #31
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	4611      	mov	r1, r2
 8000900:	4a11      	ldr	r2, [pc, #68]	; (8000948 <GPIO_IRQInterruptConfig+0x100>)
 8000902:	430b      	orrs	r3, r1
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e012      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQ_Number >= 64 && IRQ_Number < 96){
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b3f      	cmp	r3, #63	; 0x3f
 800090c:	d90f      	bls.n	800092e <GPIO_IRQInterruptConfig+0xe6>
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b5f      	cmp	r3, #95	; 0x5f
 8000912:	d80c      	bhi.n	800092e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2_ADDR |= (1 << IRQ_Number % 64);
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <GPIO_IRQInterruptConfig+0x104>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800091e:	2101      	movs	r1, #1
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4a09      	ldr	r2, [pc, #36]	; (800094c <GPIO_IRQInterruptConfig+0x104>)
 8000928:	430b      	orrs	r3, r1
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	e7ff      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000e104 	.word	0xe000e104
 8000940:	e000e108 	.word	0xe000e108
 8000944:	e000e180 	.word	0xe000e180
 8000948:	e000e184 	.word	0xe000e184
 800094c:	e000e188 	.word	0xe000e188

08000950 <GPIO_IRQPriorityConfig>:
 * @return				-returns nothing(None)
 *
 * @Note				-NVIC Priority register up to 60 with each register divided into 4
 *  * @Note				-NVIC Priority register up to 60 with each register divided into 4
 */
void GPIO_IRQPriorityConfig(uint8_t IRQ_Priority, uint8_t IRQ_Number){
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	460a      	mov	r2, r1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	71bb      	strb	r3, [r7, #6]
	//1. Select the Interrupt Priority Register (IPRx)
	uint8_t iprx = IRQ_Number / 4; // shift to next byte, that is address of selected register
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_bits = IRQ_Number % 4; // get the starting bit of the selected register, hence the section
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	f003 0303 	and.w	r3, r3, #3
 800096c:	73bb      	strb	r3, [r7, #14]
	uint8_t iprx_noBits = 8; // number of bits in each priority register section
 800096e:	2308      	movs	r3, #8
 8000970:	737b      	strb	r3, [r7, #13]

	uint8_t amount_shift = (iprx_noBits * iprx_bits) + (iprx_noBits - IMPLEMENTABLE_SECTION_BITS_PR); // number of bits section + implementable bits section
 8000972:	7bbb      	ldrb	r3, [r7, #14]
 8000974:	3301      	adds	r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	7b7a      	ldrb	r2, [r7, #13]
 800097a:	fb12 f303 	smulbb	r3, r2, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	3b04      	subs	r3, #4
 8000982:	733b      	strb	r3, [r7, #12]

	*(NVIC_IPR_BASEADDR + iprx) |= (IRQ_Priority << amount_shift);
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800098c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	79f9      	ldrb	r1, [r7, #7]
 8000994:	7b3b      	ldrb	r3, [r7, #12]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	4619      	mov	r1, r3
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009a4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009a8:	430a      	orrs	r2, r1
 80009aa:	601a      	str	r2, [r3, #0]

}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
	...

080009b8 <GPIO_IRQHandling>:
 *
 * @return				-returns nothing(None)
 *
 * @Note				-None
 */
void GPIO_IRQHandling(uint8_t PinNumber){
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	//Clear the EXTI PR register corresponding to the Pin number
	if (EXTI->PR & (1 << PinNumber)){
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <GPIO_IRQHandling+0x3c>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	2101      	movs	r1, #1
 80009ca:	fa01 f202 	lsl.w	r2, r1, r2
 80009ce:	4013      	ands	r3, r2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d009      	beq.n	80009e8 <GPIO_IRQHandling+0x30>
		//Clear
		EXTI->PR |= (1 << PinNumber);
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <GPIO_IRQHandling+0x3c>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	2101      	movs	r1, #1
 80009dc:	fa01 f202 	lsl.w	r2, r1, r2
 80009e0:	4611      	mov	r1, r2
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <GPIO_IRQHandling+0x3c>)
 80009e4:	430b      	orrs	r3, r1
 80009e6:	6153      	str	r3, [r2, #20]

	}

}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40013c00 	.word	0x40013c00

080009f8 <memset>:
 80009f8:	4402      	add	r2, r0
 80009fa:	4603      	mov	r3, r0
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d100      	bne.n	8000a02 <memset+0xa>
 8000a00:	4770      	bx	lr
 8000a02:	f803 1b01 	strb.w	r1, [r3], #1
 8000a06:	e7f9      	b.n	80009fc <memset+0x4>

08000a08 <__libc_init_array>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	4d0d      	ldr	r5, [pc, #52]	; (8000a40 <__libc_init_array+0x38>)
 8000a0c:	4c0d      	ldr	r4, [pc, #52]	; (8000a44 <__libc_init_array+0x3c>)
 8000a0e:	1b64      	subs	r4, r4, r5
 8000a10:	10a4      	asrs	r4, r4, #2
 8000a12:	2600      	movs	r6, #0
 8000a14:	42a6      	cmp	r6, r4
 8000a16:	d109      	bne.n	8000a2c <__libc_init_array+0x24>
 8000a18:	4d0b      	ldr	r5, [pc, #44]	; (8000a48 <__libc_init_array+0x40>)
 8000a1a:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__libc_init_array+0x44>)
 8000a1c:	f000 f818 	bl	8000a50 <_init>
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	10a4      	asrs	r4, r4, #2
 8000a24:	2600      	movs	r6, #0
 8000a26:	42a6      	cmp	r6, r4
 8000a28:	d105      	bne.n	8000a36 <__libc_init_array+0x2e>
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a30:	4798      	blx	r3
 8000a32:	3601      	adds	r6, #1
 8000a34:	e7ee      	b.n	8000a14 <__libc_init_array+0xc>
 8000a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3a:	4798      	blx	r3
 8000a3c:	3601      	adds	r6, #1
 8000a3e:	e7f2      	b.n	8000a26 <__libc_init_array+0x1e>
 8000a40:	08000a68 	.word	0x08000a68
 8000a44:	08000a68 	.word	0x08000a68
 8000a48:	08000a68 	.word	0x08000a68
 8000a4c:	08000a6c 	.word	0x08000a6c

08000a50 <_init>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	bf00      	nop
 8000a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a56:	bc08      	pop	{r3}
 8000a58:	469e      	mov	lr, r3
 8000a5a:	4770      	bx	lr

08000a5c <_fini>:
 8000a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5e:	bf00      	nop
 8000a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a62:	bc08      	pop	{r3}
 8000a64:	469e      	mov	lr, r3
 8000a66:	4770      	bx	lr
